//
// Generated by Bluespec Compiler, version 2021.06.chen (build f2da894e, 2021-06-19)
//
// On Fri Jul 16 20:51:49 CST 2021
//
//
// Ports:
// Name                         I/O  size props
// RDY_start                      O     1
// io_out_get                     O  1041
// RDY_io_out_get                 O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// fWires_x                       I   528
// EN_start                       I     1
// EN_io_out_get                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkIntraPredCtu(CLK,
		      RST_N,

		      fWires_x,

		      EN_start,
		      RDY_start,

		      EN_io_out_get,
		      io_out_get,
		      RDY_io_out_get);
  input  CLK;
  input  RST_N;

  // action method fWires
  input  [527 : 0] fWires_x;

  // action method start
  input  EN_start;
  output RDY_start;

  // actionvalue method io_out_get
  input  EN_io_out_get;
  output [1040 : 0] io_out_get;
  output RDY_io_out_get;

  // signals for module outputs
  wire [1040 : 0] io_out_get;
  wire RDY_io_out_get, RDY_start;

  // inlined wires
  wire [1041 : 0] fifo_out_rv$port0__write_1,
		  fifo_out_rv$port1__read,
		  fifo_out_rv$port1__write_1,
		  fifo_out_rv$port2__read;
  wire [72 : 0] w_refT$wget;
  wire _sub_RL_s00_refLT$EN_rf_refT$wget,
       _upd_RL_do_ram$EN_rf_refT$whas,
       _wget_RL_s00_refLT$EN_w_refT$wget,
       w_refT$whas;

  // register fifo_out_rv
  reg [1041 : 0] fifo_out_rv;
  wire [1041 : 0] fifo_out_rv$D_IN;
  wire fifo_out_rv$EN;

  // register r_cnt
  reg [3 : 0] r_cnt;
  reg [3 : 0] r_cnt$D_IN;
  wire r_cnt$EN;

  // register r_dcVal
  reg [7 : 0] r_dcVal;
  wire [7 : 0] r_dcVal$D_IN;
  wire r_dcVal$EN;

  // register r_ltX31
  reg [7 : 0] r_ltX31;
  wire [7 : 0] r_ltX31$D_IN;
  wire r_ltX31$EN;

  // register r_ltX_0
  reg [7 : 0] r_ltX_0;
  wire [7 : 0] r_ltX_0$D_IN;
  wire r_ltX_0$EN;

  // register r_ltX_1
  reg [7 : 0] r_ltX_1;
  wire [7 : 0] r_ltX_1$D_IN;
  wire r_ltX_1$EN;

  // register r_ltX_10
  reg [7 : 0] r_ltX_10;
  wire [7 : 0] r_ltX_10$D_IN;
  wire r_ltX_10$EN;

  // register r_ltX_11
  reg [7 : 0] r_ltX_11;
  wire [7 : 0] r_ltX_11$D_IN;
  wire r_ltX_11$EN;

  // register r_ltX_12
  reg [7 : 0] r_ltX_12;
  wire [7 : 0] r_ltX_12$D_IN;
  wire r_ltX_12$EN;

  // register r_ltX_13
  reg [7 : 0] r_ltX_13;
  wire [7 : 0] r_ltX_13$D_IN;
  wire r_ltX_13$EN;

  // register r_ltX_14
  reg [7 : 0] r_ltX_14;
  wire [7 : 0] r_ltX_14$D_IN;
  wire r_ltX_14$EN;

  // register r_ltX_15
  reg [7 : 0] r_ltX_15;
  wire [7 : 0] r_ltX_15$D_IN;
  wire r_ltX_15$EN;

  // register r_ltX_2
  reg [7 : 0] r_ltX_2;
  wire [7 : 0] r_ltX_2$D_IN;
  wire r_ltX_2$EN;

  // register r_ltX_3
  reg [7 : 0] r_ltX_3;
  wire [7 : 0] r_ltX_3$D_IN;
  wire r_ltX_3$EN;

  // register r_ltX_4
  reg [7 : 0] r_ltX_4;
  wire [7 : 0] r_ltX_4$D_IN;
  wire r_ltX_4$EN;

  // register r_ltX_5
  reg [7 : 0] r_ltX_5;
  wire [7 : 0] r_ltX_5$D_IN;
  wire r_ltX_5$EN;

  // register r_ltX_6
  reg [7 : 0] r_ltX_6;
  wire [7 : 0] r_ltX_6$D_IN;
  wire r_ltX_6$EN;

  // register r_ltX_7
  reg [7 : 0] r_ltX_7;
  wire [7 : 0] r_ltX_7$D_IN;
  wire r_ltX_7$EN;

  // register r_ltX_8
  reg [7 : 0] r_ltX_8;
  wire [7 : 0] r_ltX_8$D_IN;
  wire r_ltX_8$EN;

  // register r_ltX_9
  reg [7 : 0] r_ltX_9;
  wire [7 : 0] r_ltX_9$D_IN;
  wire r_ltX_9$EN;

  // register r_modeL
  reg [23 : 0] r_modeL;
  wire [23 : 0] r_modeL$D_IN;
  wire r_modeL$EN;

  // register r_modeT
  reg [23 : 0] r_modeT;
  wire [23 : 0] r_modeT$D_IN;
  wire r_modeT$EN;

  // register r_mostModeY
  reg [17 : 0] r_mostModeY;
  wire [17 : 0] r_mostModeY$D_IN;
  wire r_mostModeY$EN;

  // register r_recon
  reg [511 : 0] r_recon;
  wire [511 : 0] r_recon$D_IN;
  wire r_recon$EN;

  // register r_refL
  reg [255 : 0] r_refL;
  reg [255 : 0] r_refL$D_IN;
  wire r_refL$EN;

  // register r_ref_0
  reg [263 : 0] r_ref_0;
  wire [263 : 0] r_ref_0$D_IN;
  wire r_ref_0$EN;

  // register r_ref_1
  reg [263 : 0] r_ref_1;
  wire [263 : 0] r_ref_1$D_IN;
  wire r_ref_1$EN;

  // register r_sortModeY
  reg [17 : 0] r_sortModeY;
  wire [17 : 0] r_sortModeY$D_IN;
  wire r_sortModeY$EN;

  // register r_tmpBuf
  reg [63 : 0] r_tmpBuf;
  wire [63 : 0] r_tmpBuf$D_IN;
  wire r_tmpBuf$EN;

  // register r_topX
  reg [319 : 0] r_topX;
  wire [319 : 0] r_topX$D_IN;
  wire r_topX$EN;

  // register r_valid
  reg [79 : 0] r_valid;
  wire [79 : 0] r_valid$D_IN;
  wire r_valid$EN;

  // register r_zIdx
  reg [3 : 0] r_zIdx;
  wire [3 : 0] r_zIdx$D_IN;
  wire r_zIdx$EN;

  // ports of submodule m_intra8
  wire [1543 : 0] m_intra8$io_out_get;
  wire [1077 : 0] m_intra8$fWires_x;
  wire m_intra8$EN_io_out_get,
       m_intra8$EN_startPred,
       m_intra8$RDY_io_out_get,
       m_intra8$RDY_startPred;

  // ports of submodule rf_refT
  wire [63 : 0] rf_refT$D_IN, rf_refT$D_OUT_1;
  wire [7 : 0] rf_refT$ADDR_1,
	       rf_refT$ADDR_2,
	       rf_refT$ADDR_3,
	       rf_refT$ADDR_4,
	       rf_refT$ADDR_5,
	       rf_refT$ADDR_IN;
  wire rf_refT$WE;

  // rule scheduling signals
  wire WILL_FIRE_RL_do_cnt, WILL_FIRE_RL_s00_refLT, WILL_FIRE_RL_s04_result;

  // inputs to muxes for submodule ports
  wire [319 : 0] MUX_r_topX$write_1__VAL_1, MUX_r_topX$write_1__VAL_2;
  wire [72 : 0] MUX_w_refT$wset_1__VAL_1, MUX_w_refT$wset_1__VAL_2;
  wire [23 : 0] MUX_r_modeT$write_1__VAL_1;
  wire [3 : 0] MUX_r_cnt$write_1__VAL_1,
	       MUX_r_cnt$write_1__VAL_2,
	       MUX_r_zIdx$write_1__VAL_1;

  // remaining internal signals
  reg [135 : 0] IF_SEL_ARR_r_valid_read_BITS_4_TO_0_0_r_valid__ETC___d407,
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d340;
  reg [127 : 0] CASE_rcuY925_0_r_refL_BITS_63_TO_56_CONCAT_r_r_ETC__q31,
		IF_SEL_ARR_r_valid_read_BITS_4_TO_0_0_r_valid__ETC___d304,
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228,
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d260;
  reg [63 : 0] x1__h7496, x2__h7497;
  reg [11 : 0] CASE_x266_0b0_r_mostModeY_BITS_5_TO_0_CONCAT_r_ETC__q38;
  reg [7 : 0] CASE_valid926_0b1110_IF_r_zIdx_read__7_BIT_3_6_ETC__q32,
	      IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d402;
  reg [5 : 0] CASE_rcuY925_0_r_modeL_BITS_5_TO_0_1_r_modeL_B_ETC__q1,
	      CASE_x266_0b0_r_mostModeY_BITS_17_TO_12_0b1_r__ETC__q39,
	      modeT__h1929;
  reg [4 : 0] valid__h1926;
  wire [191 : 0] IF_r_cnt_read__04_EQ_4_21_THEN_rf_refT_sub_IF__ETC___d131;
  wire [127 : 0] r_ref_0_read__11_BITS_135_TO_128_69_CONCAT_0_C_ETC___d675;
  wire [103 : 0] r_ref_0_read__11_BITS_263_TO_256_61_CONCAT_0_C_ETC___d548;
  wire [95 : 0] r_ref_0_read__11_BITS_135_TO_128_69_CONCAT_0_C_ETC___d650;
  wire [71 : 0] r_ref_0_read__11_BITS_263_TO_256_61_CONCAT_0_C_ETC___d522;
  wire [63 : 0] IF_SEL_ARR_r_valid_read_BITS_4_TO_0_0_r_valid__ETC___d352,
		r_ref_0_read__11_BITS_135_TO_128_69_CONCAT_0_C_ETC___d624,
		refLx__h60419;
  wire [39 : 0] r_ref_0_read__11_BITS_263_TO_256_61_CONCAT_0_C_ETC___d494;
  wire [17 : 0] IF_IF_SEL_ARR_r_valid_read_BITS_4_TO_0_0_r_val_ETC___d63;
  wire [11 : 0] x0307_PLUS_y0308_PLUS_8__q33,
		x__h40307,
		x__h40309,
		x__h40330,
		x__h40332,
		x__h40353,
		x__h40355,
		x__h40376,
		x__h40378,
		x__h40399,
		x__h40401,
		x__h40422,
		x__h40424,
		x__h40445,
		x__h40447,
		x__h40468,
		y__h40308,
		y__h40310,
		y__h40331,
		y__h40333,
		y__h40354,
		y__h40356,
		y__h40377,
		y__h40379,
		y__h40400,
		y__h40402,
		y__h40423,
		y__h40425,
		y__h40446,
		y__h40448,
		y__h40469;
  wire [9 : 0] x0005_PLUS_2__q19,
	       x0165_PLUS_2__q20,
	       x0325_PLUS_2__q21,
	       x0485_PLUS_2__q22,
	       x0624_PLUS_2__q23,
	       x0763_PLUS_2__q24,
	       x0902_PLUS_2__q25,
	       x1041_PLUS_2__q26,
	       x1180_PLUS_2__q27,
	       x1319_PLUS_2__q28,
	       x1458_PLUS_2__q29,
	       x1597_PLUS_2__q30,
	       x1682_PLUS_2__q37,
	       x6091_PLUS_2__q4,
	       x6296_PLUS_2__q5,
	       x6464_PLUS_2__q6,
	       x6632_PLUS_2__q7,
	       x6800_PLUS_2__q8,
	       x6968_PLUS_2__q9,
	       x7136_PLUS_2__q10,
	       x7283_PLUS_2__q11,
	       x7430_PLUS_2__q12,
	       x7577_PLUS_2__q13,
	       x7724_PLUS_2__q14,
	       x7871_PLUS_2__q15,
	       x8018_PLUS_2__q34,
	       x8165_PLUS_2__q35,
	       x8312_PLUS_2__q36,
	       x9488_PLUS_2__q16,
	       x9685_PLUS_2__q17,
	       x9845_PLUS_2__q18,
	       x__h46091,
	       x__h46093,
	       x__h46095,
	       x__h46296,
	       x__h46298,
	       x__h46300,
	       x__h46464,
	       x__h46466,
	       x__h46632,
	       x__h46634,
	       x__h46800,
	       x__h46802,
	       x__h46968,
	       x__h46970,
	       x__h47136,
	       x__h47138,
	       x__h47283,
	       x__h47285,
	       x__h47430,
	       x__h47432,
	       x__h47577,
	       x__h47579,
	       x__h47724,
	       x__h47726,
	       x__h47871,
	       x__h47873,
	       x__h48018,
	       x__h48020,
	       x__h48165,
	       x__h48167,
	       x__h48312,
	       x__h48314,
	       x__h49488,
	       x__h49490,
	       x__h49492,
	       x__h49685,
	       x__h49687,
	       x__h49689,
	       x__h49845,
	       x__h49847,
	       x__h49849,
	       x__h50005,
	       x__h50007,
	       x__h50009,
	       x__h50165,
	       x__h50167,
	       x__h50169,
	       x__h50325,
	       x__h50327,
	       x__h50329,
	       x__h50485,
	       x__h50487,
	       x__h50489,
	       x__h50624,
	       x__h50626,
	       x__h50628,
	       x__h50763,
	       x__h50765,
	       x__h50767,
	       x__h50902,
	       x__h50904,
	       x__h50906,
	       x__h51041,
	       x__h51043,
	       x__h51045,
	       x__h51180,
	       x__h51182,
	       x__h51184,
	       x__h51319,
	       x__h51321,
	       x__h51323,
	       x__h51458,
	       x__h51460,
	       x__h51462,
	       x__h51597,
	       x__h51599,
	       x__h51682,
	       x__h51684,
	       y__h46094,
	       y__h46096,
	       y__h46299,
	       y__h46301,
	       y__h46467,
	       y__h46469,
	       y__h46635,
	       y__h46637,
	       y__h46803,
	       y__h46805,
	       y__h46971,
	       y__h46973,
	       y__h47139,
	       y__h47141,
	       y__h47286,
	       y__h47288,
	       y__h47433,
	       y__h47435,
	       y__h47580,
	       y__h47582,
	       y__h47727,
	       y__h47729,
	       y__h47874,
	       y__h47876,
	       y__h48021,
	       y__h48023,
	       y__h48168,
	       y__h48170,
	       y__h48315,
	       y__h48317,
	       y__h49491,
	       y__h49493,
	       y__h49688,
	       y__h49690,
	       y__h49850,
	       y__h50010,
	       y__h50170,
	       y__h50330,
	       y__h50490,
	       y__h50629,
	       y__h50768,
	       y__h50907,
	       y__h51046,
	       y__h51185,
	       y__h51324,
	       y__h51463,
	       y__h51602,
	       y__h51687;
  wire [7 : 0] x__h5552, x__h70414;
  wire [5 : 0] IF_m_intra8_io_out_get_93_BITS_1541_TO_1536_94_ETC___d709,
	       IF_m_intra8_io_out_get_93_BITS_1541_TO_1536_94_ETC___d714,
	       IF_m_intra8_io_out_get_93_BITS_1541_TO_1536_94_ETC___d715,
	       modeL__h1928,
	       x952_PLUS_1__q2,
	       x952_PLUS_31__q3,
	       xModeEnc__h51928,
	       xModeEnc__h52070,
	       xModeEnc__h52103,
	       xModeMinus1__h51803,
	       xModeMinus2__h51804,
	       xModeMinus3__h51805,
	       x__h3950,
	       x__h3952,
	       x__h4033,
	       x__h51923;
  wire [3 : 0] rIdx__h1923;
  wire [2 : 0] x__h27939, x__h4266;
  wire [1 : 0] rcuX__h1924, rcuY__h1925;
  wire x0LT1__h4088, x0LT2__h4089, x1LT2__h4090;

  // action method start
  assign RDY_start = r_cnt == 4'd15 ;

  // actionvalue method io_out_get
  assign io_out_get = fifo_out_rv[1040:0] ;
  assign RDY_io_out_get = fifo_out_rv[1041] ;

  // submodule m_intra8
  mkIntraPred8 m_intra8(.CLK(CLK),
			.RST_N(RST_N),
			.fWires_x(m_intra8$fWires_x),
			.EN_startPred(m_intra8$EN_startPred),
			.EN_io_out_get(m_intra8$EN_io_out_get),
			.RDY_startPred(m_intra8$RDY_startPred),
			.io_out_get(m_intra8$io_out_get),
			.RDY_io_out_get(m_intra8$RDY_io_out_get));

  // submodule rf_refT
  RegFile #(.addr_width(32'd8),
	    .data_width(32'd64),
	    .lo(8'd0),
	    .hi(8'd255)) rf_refT(.CLK(CLK),
				 .ADDR_1(rf_refT$ADDR_1),
				 .ADDR_2(rf_refT$ADDR_2),
				 .ADDR_3(rf_refT$ADDR_3),
				 .ADDR_4(rf_refT$ADDR_4),
				 .ADDR_5(rf_refT$ADDR_5),
				 .ADDR_IN(rf_refT$ADDR_IN),
				 .D_IN(rf_refT$D_IN),
				 .WE(rf_refT$WE),
				 .D_OUT_1(rf_refT$D_OUT_1),
				 .D_OUT_2(),
				 .D_OUT_3(),
				 .D_OUT_4(),
				 .D_OUT_5());

  // rule RL_do_cnt
  assign WILL_FIRE_RL_do_cnt = r_cnt <= 4'd7 ;

  // rule RL_s00_refLT
  assign WILL_FIRE_RL_s00_refLT = r_cnt <= 4'd4 ;

  // rule RL_s04_result
  assign WILL_FIRE_RL_s04_result =
	     m_intra8$RDY_io_out_get && !fifo_out_rv$port1__read[1041] &&
	     r_cnt != 4'd15 ;

  // inputs to muxes for submodule ports
  assign MUX_r_cnt$write_1__VAL_1 = (r_zIdx == 4'd15) ? r_zIdx : 4'd5 ;
  assign MUX_r_cnt$write_1__VAL_2 = r_cnt + 4'd1 ;
  assign MUX_r_modeT$write_1__VAL_1 =
	     { (rcuX__h1924 == 2'd3) ?
		 m_intra8$io_out_get[1541:1536] :
		 r_modeT[23:18],
	       (rcuX__h1924 == 2'd2) ?
		 m_intra8$io_out_get[1541:1536] :
		 r_modeT[17:12],
	       (rcuX__h1924 == 2'd1) ?
		 m_intra8$io_out_get[1541:1536] :
		 r_modeT[11:6],
	       (rcuX__h1924 == 2'd0) ?
		 m_intra8$io_out_get[1541:1536] :
		 r_modeT[5:0] } ;
  assign MUX_r_topX$write_1__VAL_1 =
	     { r_topX[319:256],
	       (rcuX__h1924 == 2'd3) ?
		 m_intra8$io_out_get[511:448] :
		 r_topX[255:192],
	       (rcuX__h1924 == 2'd2) ?
		 m_intra8$io_out_get[511:448] :
		 r_topX[191:128],
	       (rcuX__h1924 == 2'd1) ?
		 m_intra8$io_out_get[511:448] :
		 r_topX[127:64],
	       (rcuX__h1924 == 2'd0) ?
		 m_intra8$io_out_get[511:448] :
		 r_topX[63:0] } ;
  assign MUX_r_topX$write_1__VAL_2 =
	     { IF_r_cnt_read__04_EQ_4_21_THEN_rf_refT_sub_IF__ETC___d131,
	       (r_cnt == 4'd1) ? rf_refT$D_OUT_1 : r_topX[127:64],
	       (r_cnt == 4'd0) ? rf_refT$D_OUT_1 : r_topX[63:0] } ;
  assign MUX_r_zIdx$write_1__VAL_1 = r_zIdx + 4'd1 ;
  assign MUX_w_refT$wset_1__VAL_1 =
	     { 1'd1, x__h70414, m_intra8$io_out_get[511:448] } ;
  assign MUX_w_refT$wset_1__VAL_2 =
	     { 1'd0,
	       x__h5552,
	       64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;

  // inlined wires
  assign w_refT$wget =
	     WILL_FIRE_RL_s04_result ?
	       MUX_w_refT$wset_1__VAL_1 :
	       MUX_w_refT$wset_1__VAL_2 ;
  assign w_refT$whas = WILL_FIRE_RL_s00_refLT || WILL_FIRE_RL_s04_result ;
  assign _upd_RL_do_ram$EN_rf_refT$whas = w_refT$whas && w_refT$wget[72] ;
  assign _sub_RL_s00_refLT$EN_rf_refT$wget =
	     r_cnt == 4'd4 || r_cnt[2:0] == 3'd3 || r_cnt[2:0] == 3'd2 ||
	     r_cnt[2:0] == 3'd1 ||
	     r_cnt[2:0] == 3'd0 ;
  assign _wget_RL_s00_refLT$EN_w_refT$wget =
	     w_refT$whas &&
	     (r_cnt == 4'd4 || r_cnt[2:0] == 3'd3 || r_cnt[2:0] == 3'd2 ||
	      r_cnt[2:0] == 3'd1 ||
	      r_cnt[2:0] == 3'd0) ;
  assign fifo_out_rv$port0__write_1 =
	     { 1'd0,
	       1041'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign fifo_out_rv$port1__read =
	     EN_io_out_get ? fifo_out_rv$port0__write_1 : fifo_out_rv ;
  assign fifo_out_rv$port1__write_1 =
	     { 1'd1,
	       m_intra8$io_out_get[1541:1536],
	       x__h51923,
	       valid__h1926,
	       m_intra8$io_out_get[1535:512] } ;
  assign fifo_out_rv$port2__read =
	     WILL_FIRE_RL_s04_result ?
	       fifo_out_rv$port1__write_1 :
	       fifo_out_rv$port1__read ;

  // register fifo_out_rv
  assign fifo_out_rv$D_IN = fifo_out_rv$port2__read ;
  assign fifo_out_rv$EN = 1'b1 ;

  // register r_cnt
  always@(WILL_FIRE_RL_s04_result or
	  MUX_r_cnt$write_1__VAL_1 or
	  WILL_FIRE_RL_do_cnt or MUX_r_cnt$write_1__VAL_2 or EN_start)
  case (1'b1)
    WILL_FIRE_RL_s04_result: r_cnt$D_IN = MUX_r_cnt$write_1__VAL_1;
    WILL_FIRE_RL_do_cnt: r_cnt$D_IN = MUX_r_cnt$write_1__VAL_2;
    EN_start: r_cnt$D_IN = 4'd0;
    default: r_cnt$D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign r_cnt$EN =
	     WILL_FIRE_RL_do_cnt || WILL_FIRE_RL_s04_result || EN_start ;

  // register r_dcVal
  assign r_dcVal$D_IN = x0307_PLUS_y0308_PLUS_8__q33[11:4] ;
  assign r_dcVal$EN = r_cnt == 4'd6 ;

  // register r_ltX31
  assign r_ltX31$D_IN = rf_refT$D_OUT_1[63:56] ;
  assign r_ltX31$EN = WILL_FIRE_RL_s00_refLT && r_cnt[2:0] == 3'd3 ;

  // register r_ltX_0
  assign r_ltX_0$D_IN = m_intra8$io_out_get[511:504] ;
  assign r_ltX_0$EN = WILL_FIRE_RL_s04_result && rIdx__h1923 == 4'd0 ;

  // register r_ltX_1
  assign r_ltX_1$D_IN = m_intra8$io_out_get[511:504] ;
  assign r_ltX_1$EN = WILL_FIRE_RL_s04_result && rIdx__h1923 == 4'd1 ;

  // register r_ltX_10
  assign r_ltX_10$D_IN = m_intra8$io_out_get[511:504] ;
  assign r_ltX_10$EN = WILL_FIRE_RL_s04_result && rIdx__h1923 == 4'd10 ;

  // register r_ltX_11
  assign r_ltX_11$D_IN = m_intra8$io_out_get[511:504] ;
  assign r_ltX_11$EN = WILL_FIRE_RL_s04_result && rIdx__h1923 == 4'd11 ;

  // register r_ltX_12
  assign r_ltX_12$D_IN = rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_12$EN = WILL_FIRE_RL_s00_refLT && r_cnt[2:0] == 3'd0 ;

  // register r_ltX_13
  assign r_ltX_13$D_IN = rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_13$EN = WILL_FIRE_RL_s00_refLT && r_cnt[2:0] == 3'd1 ;

  // register r_ltX_14
  assign r_ltX_14$D_IN = rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_14$EN = WILL_FIRE_RL_s00_refLT && r_cnt[2:0] == 3'd2 ;

  // register r_ltX_15
  assign r_ltX_15$D_IN =
	     (rIdx__h1923 == 4'd7) ? m_intra8$io_out_get[511:504] : r_ltX31 ;
  assign r_ltX_15$EN =
	     WILL_FIRE_RL_s04_result &&
	     (rIdx__h1923 == 4'd7 || rIdx__h1923 == 4'd15) ;

  // register r_ltX_2
  assign r_ltX_2$D_IN = m_intra8$io_out_get[511:504] ;
  assign r_ltX_2$EN = WILL_FIRE_RL_s04_result && rIdx__h1923 == 4'd2 ;

  // register r_ltX_3
  assign r_ltX_3$D_IN = m_intra8$io_out_get[511:504] ;
  assign r_ltX_3$EN = WILL_FIRE_RL_s04_result && rIdx__h1923 == 4'd3 ;

  // register r_ltX_4
  assign r_ltX_4$D_IN = m_intra8$io_out_get[511:504] ;
  assign r_ltX_4$EN = WILL_FIRE_RL_s04_result && rIdx__h1923 == 4'd4 ;

  // register r_ltX_5
  assign r_ltX_5$D_IN = m_intra8$io_out_get[511:504] ;
  assign r_ltX_5$EN = WILL_FIRE_RL_s04_result && rIdx__h1923 == 4'd5 ;

  // register r_ltX_6
  assign r_ltX_6$D_IN = m_intra8$io_out_get[511:504] ;
  assign r_ltX_6$EN = WILL_FIRE_RL_s04_result && rIdx__h1923 == 4'd6 ;

  // register r_ltX_7
  assign r_ltX_7$D_IN = r_ltX_15 ;
  assign r_ltX_7$EN = WILL_FIRE_RL_s04_result && rIdx__h1923 == 4'd15 ;

  // register r_ltX_8
  assign r_ltX_8$D_IN = m_intra8$io_out_get[511:504] ;
  assign r_ltX_8$EN = WILL_FIRE_RL_s04_result && rIdx__h1923 == 4'd8 ;

  // register r_ltX_9
  assign r_ltX_9$D_IN = m_intra8$io_out_get[511:504] ;
  assign r_ltX_9$EN = WILL_FIRE_RL_s04_result && rIdx__h1923 == 4'd9 ;

  // register r_modeL
  assign r_modeL$D_IN =
	     { (rcuY__h1925 == 2'd3) ?
		 m_intra8$io_out_get[1541:1536] :
		 r_modeL[23:18],
	       (rcuY__h1925 == 2'd2) ?
		 m_intra8$io_out_get[1541:1536] :
		 r_modeL[17:12],
	       (rcuY__h1925 == 2'd1) ?
		 m_intra8$io_out_get[1541:1536] :
		 r_modeL[11:6],
	       (rcuY__h1925 == 2'd0) ?
		 m_intra8$io_out_get[1541:1536] :
		 r_modeL[5:0] } ;
  assign r_modeL$EN = WILL_FIRE_RL_s04_result ;

  // register r_modeT
  assign r_modeT$D_IN =
	     WILL_FIRE_RL_s04_result ?
	       MUX_r_modeT$write_1__VAL_1 :
	       24'd266305 ;
  assign r_modeT$EN = WILL_FIRE_RL_s04_result || WILL_FIRE_RL_s00_refLT ;

  // register r_mostModeY
  assign r_mostModeY$D_IN =
	     (modeL__h1928 == modeT__h1929) ?
	       IF_IF_SEL_ARR_r_valid_read_BITS_4_TO_0_0_r_val_ETC___d63 :
	       { (modeL__h1928 != 6'd0 && modeT__h1929 != 6'd0) ?
		   6'd0 :
		   ((modeL__h1928 + modeT__h1929 < 6'd2) ? 6'd26 : 6'd1),
		 modeT__h1929,
		 modeL__h1928 } ;
  assign r_mostModeY$EN = 1'd1 ;

  // register r_recon
  assign r_recon$D_IN = 512'h0 ;
  assign r_recon$EN = 1'b0 ;

  // register r_refL
  always@(rcuY__h1925 or refLx__h60419 or r_refL)
  begin
    case (rcuY__h1925)
      2'd0: r_refL$D_IN = { r_refL[255:64], refLx__h60419 };
      2'd1: r_refL$D_IN = { r_refL[255:128], refLx__h60419, r_refL[63:0] };
      2'd2: r_refL$D_IN = { r_refL[255:192], refLx__h60419, r_refL[127:0] };
      2'd3: r_refL$D_IN = { refLx__h60419, r_refL[191:0] };
    endcase
  end
  assign r_refL$EN = WILL_FIRE_RL_s04_result ;

  // register r_ref_0
  assign r_ref_0$D_IN =
	     (valid__h1926 == 5'b0) ?
	       264'h808080808080808080808080808080808080808080808080808080808080808080 :
	       { IF_SEL_ARR_r_valid_read_BITS_4_TO_0_0_r_valid__ETC___d304,
		 IF_SEL_ARR_r_valid_read_BITS_4_TO_0_0_r_valid__ETC___d407 } ;
  assign r_ref_0$EN = r_cnt == 4'd5 ;

  // register r_ref_1
  assign r_ref_1$D_IN =
	     { r_ref_0_read__11_BITS_263_TO_256_61_CONCAT_0_C_ETC___d548,
	       x8018_PLUS_2__q34[9:2],
	       x8165_PLUS_2__q35[9:2],
	       x8312_PLUS_2__q36[9:2],
	       r_ref_0_read__11_BITS_135_TO_128_69_CONCAT_0_C_ETC___d675,
	       x1682_PLUS_2__q37[9:2] } ;
  assign r_ref_1$EN = r_cnt == 4'd6 ;

  // register r_sortModeY
  assign r_sortModeY$D_IN =
	     { CASE_x266_0b0_r_mostModeY_BITS_5_TO_0_CONCAT_r_ETC__q38,
	       CASE_x266_0b0_r_mostModeY_BITS_17_TO_12_0b1_r__ETC__q39 } ;
  assign r_sortModeY$EN = 1'd1 ;

  // register r_tmpBuf
  assign r_tmpBuf$D_IN = 64'h0 ;
  assign r_tmpBuf$EN = 1'b0 ;

  // register r_topX
  assign r_topX$D_IN =
	     WILL_FIRE_RL_s04_result ?
	       MUX_r_topX$write_1__VAL_1 :
	       MUX_r_topX$write_1__VAL_2 ;
  assign r_topX$EN = w_refT$whas ;

  // register r_valid
  assign r_valid$D_IN =
	     { 27'd62713787,
	       fWires_x[524],
	       fWires_x[524],
	       8'b01111011,
	       fWires_x[524],
	       fWires_x[524],
	       fWires_x[524],
	       10'd478,
	       fWires_x[527:526],
	       fWires_x[526],
	       2'd2,
	       fWires_x[526],
	       fWires_x[526],
	       fWires_x[526],
	       9'd443,
	       fWires_x[524],
	       fWires_x[524],
	       fWires_x[524],
	       fWires_x[526],
	       fWires_x[526],
	       fWires_x[526],
	       2'd2,
	       fWires_x[526],
	       fWires_x[526:524],
	       fWires_x[524] } ;
  assign r_valid$EN = EN_start ;

  // register r_zIdx
  assign r_zIdx$D_IN =
	     WILL_FIRE_RL_s04_result ? MUX_r_zIdx$write_1__VAL_1 : 4'd0 ;
  assign r_zIdx$EN = WILL_FIRE_RL_s04_result || EN_start ;

  // submodule m_intra8
  assign m_intra8$fWires_x =
	     { r_ref_1,
	       r_ref_0,
	       fWires_x[511:0],
	       r_dcVal,
	       fWires_x[523:518],
	       fWires_x[523:518],
	       r_mostModeY } ;
  assign m_intra8$EN_startPred = m_intra8$RDY_startPred && r_cnt == 4'd7 ;
  assign m_intra8$EN_io_out_get = WILL_FIRE_RL_s04_result ;

  // submodule rf_refT
  assign rf_refT$ADDR_1 = w_refT$wget[71:64] ;
  assign rf_refT$ADDR_2 = 8'h0 ;
  assign rf_refT$ADDR_3 = 8'h0 ;
  assign rf_refT$ADDR_4 = 8'h0 ;
  assign rf_refT$ADDR_5 = 8'h0 ;
  assign rf_refT$ADDR_IN = w_refT$wget[71:64] ;
  assign rf_refT$D_IN = w_refT$wget[63:0] ;
  assign rf_refT$WE = _upd_RL_do_ram$EN_rf_refT$whas ;

  // remaining internal signals
  assign IF_IF_SEL_ARR_r_valid_read_BITS_4_TO_0_0_r_val_ETC___d63 =
	     (modeL__h1928 <= 6'd1) ?
	       18'd106560 :
	       { x__h3950 + 6'd2, x__h4033 + 6'd2, modeL__h1928 } ;
  assign IF_SEL_ARR_r_valid_read_BITS_4_TO_0_0_r_valid__ETC___d352 =
	     (valid__h1926 == 5'b01110) ? {8{x1__h7496[63:56]}} : x2__h7497 ;
  assign IF_m_intra8_io_out_get_93_BITS_1541_TO_1536_94_ETC___d709 =
	     (m_intra8$io_out_get[1541:1536] <= r_sortModeY[11:6]) ?
	       ((m_intra8$io_out_get[1541:1536] <= r_sortModeY[5:0]) ?
		  m_intra8$io_out_get[1541:1536] :
		  xModeMinus1__h51803) :
	       xModeEnc__h52103 ;
  assign IF_m_intra8_io_out_get_93_BITS_1541_TO_1536_94_ETC___d714 =
	     (xModeMinus1__h51803 <= r_sortModeY[11:6]) ?
	       xModeEnc__h52103 :
	       xModeEnc__h52070 ;
  assign IF_m_intra8_io_out_get_93_BITS_1541_TO_1536_94_ETC___d715 =
	     (m_intra8$io_out_get[1541:1536] <= r_sortModeY[17:12]) ?
	       IF_m_intra8_io_out_get_93_BITS_1541_TO_1536_94_ETC___d709 :
	       IF_m_intra8_io_out_get_93_BITS_1541_TO_1536_94_ETC___d714 ;
  assign IF_r_cnt_read__04_EQ_4_21_THEN_rf_refT_sub_IF__ETC___d131 =
	     { (r_cnt == 4'd4) ? rf_refT$D_OUT_1 : r_topX[319:256],
	       (r_cnt == 4'd3) ? rf_refT$D_OUT_1 : r_topX[255:192],
	       (r_cnt == 4'd2) ? rf_refT$D_OUT_1 : r_topX[191:128] } ;
  assign modeL__h1928 =
	     valid__h1926[1] ?
	       CASE_rcuY925_0_r_modeL_BITS_5_TO_0_1_r_modeL_B_ETC__q1 :
	       6'd1 ;
  assign rIdx__h1923 = { r_zIdx[3], r_zIdx[1], r_zIdx[2], r_zIdx[0] } ;
  assign r_ref_0_read__11_BITS_135_TO_128_69_CONCAT_0_C_ETC___d624 =
	     { r_ref_0[135:128],
	       x9488_PLUS_2__q16[9:2],
	       x9685_PLUS_2__q17[9:2],
	       x9845_PLUS_2__q18[9:2],
	       x0005_PLUS_2__q19[9:2],
	       x0165_PLUS_2__q20[9:2],
	       x0325_PLUS_2__q21[9:2],
	       x0485_PLUS_2__q22[9:2] } ;
  assign r_ref_0_read__11_BITS_135_TO_128_69_CONCAT_0_C_ETC___d650 =
	     { r_ref_0_read__11_BITS_135_TO_128_69_CONCAT_0_C_ETC___d624,
	       x0624_PLUS_2__q23[9:2],
	       x0763_PLUS_2__q24[9:2],
	       x0902_PLUS_2__q25[9:2],
	       x1041_PLUS_2__q26[9:2] } ;
  assign r_ref_0_read__11_BITS_135_TO_128_69_CONCAT_0_C_ETC___d675 =
	     { r_ref_0_read__11_BITS_135_TO_128_69_CONCAT_0_C_ETC___d650,
	       x1180_PLUS_2__q27[9:2],
	       x1319_PLUS_2__q28[9:2],
	       x1458_PLUS_2__q29[9:2],
	       x1597_PLUS_2__q30[9:2] } ;
  assign r_ref_0_read__11_BITS_263_TO_256_61_CONCAT_0_C_ETC___d494 =
	     { r_ref_0[263:256],
	       x6091_PLUS_2__q4[9:2],
	       x6296_PLUS_2__q5[9:2],
	       x6464_PLUS_2__q6[9:2],
	       x6632_PLUS_2__q7[9:2] } ;
  assign r_ref_0_read__11_BITS_263_TO_256_61_CONCAT_0_C_ETC___d522 =
	     { r_ref_0_read__11_BITS_263_TO_256_61_CONCAT_0_C_ETC___d494,
	       x6800_PLUS_2__q8[9:2],
	       x6968_PLUS_2__q9[9:2],
	       x7136_PLUS_2__q10[9:2],
	       x7283_PLUS_2__q11[9:2] } ;
  assign r_ref_0_read__11_BITS_263_TO_256_61_CONCAT_0_C_ETC___d548 =
	     { r_ref_0_read__11_BITS_263_TO_256_61_CONCAT_0_C_ETC___d522,
	       x7430_PLUS_2__q12[9:2],
	       x7577_PLUS_2__q13[9:2],
	       x7724_PLUS_2__q14[9:2],
	       x7871_PLUS_2__q15[9:2] } ;
  assign rcuX__h1924 = { r_zIdx[2], r_zIdx[0] } ;
  assign rcuY__h1925 = { r_zIdx[3], r_zIdx[1] } ;
  assign refLx__h60419 =
	     { m_intra8$io_out_get[511:504],
	       m_intra8$io_out_get[447:440],
	       m_intra8$io_out_get[383:376],
	       m_intra8$io_out_get[319:312],
	       m_intra8$io_out_get[255:248],
	       m_intra8$io_out_get[191:184],
	       m_intra8$io_out_get[127:120],
	       m_intra8$io_out_get[63:56] } ;
  assign x0005_PLUS_2__q19 = x__h50005 + 10'd2 ;
  assign x0165_PLUS_2__q20 = x__h50165 + 10'd2 ;
  assign x0307_PLUS_y0308_PLUS_8__q33 = x__h40307 + y__h40308 + 12'd8 ;
  assign x0325_PLUS_2__q21 = x__h50325 + 10'd2 ;
  assign x0485_PLUS_2__q22 = x__h50485 + 10'd2 ;
  assign x0624_PLUS_2__q23 = x__h50624 + 10'd2 ;
  assign x0763_PLUS_2__q24 = x__h50763 + 10'd2 ;
  assign x0902_PLUS_2__q25 = x__h50902 + 10'd2 ;
  assign x0LT1__h4088 = r_mostModeY[5:0] < r_mostModeY[11:6] ;
  assign x0LT2__h4089 = r_mostModeY[5:0] < r_mostModeY[17:12] ;
  assign x1041_PLUS_2__q26 = x__h51041 + 10'd2 ;
  assign x1180_PLUS_2__q27 = x__h51180 + 10'd2 ;
  assign x1319_PLUS_2__q28 = x__h51319 + 10'd2 ;
  assign x1458_PLUS_2__q29 = x__h51458 + 10'd2 ;
  assign x1597_PLUS_2__q30 = x__h51597 + 10'd2 ;
  assign x1682_PLUS_2__q37 = x__h51682 + 10'd2 ;
  assign x1LT2__h4090 = r_mostModeY[11:6] < r_mostModeY[17:12] ;
  assign x6091_PLUS_2__q4 = x__h46091 + 10'd2 ;
  assign x6296_PLUS_2__q5 = x__h46296 + 10'd2 ;
  assign x6464_PLUS_2__q6 = x__h46464 + 10'd2 ;
  assign x6632_PLUS_2__q7 = x__h46632 + 10'd2 ;
  assign x6800_PLUS_2__q8 = x__h46800 + 10'd2 ;
  assign x6968_PLUS_2__q9 = x__h46968 + 10'd2 ;
  assign x7136_PLUS_2__q10 = x__h47136 + 10'd2 ;
  assign x7283_PLUS_2__q11 = x__h47283 + 10'd2 ;
  assign x7430_PLUS_2__q12 = x__h47430 + 10'd2 ;
  assign x7577_PLUS_2__q13 = x__h47577 + 10'd2 ;
  assign x7724_PLUS_2__q14 = x__h47724 + 10'd2 ;
  assign x7871_PLUS_2__q15 = x__h47871 + 10'd2 ;
  assign x8018_PLUS_2__q34 = x__h48018 + 10'd2 ;
  assign x8165_PLUS_2__q35 = x__h48165 + 10'd2 ;
  assign x8312_PLUS_2__q36 = x__h48312 + 10'd2 ;
  assign x9488_PLUS_2__q16 = x__h49488 + 10'd2 ;
  assign x952_PLUS_1__q2 = x__h3952 + 6'd1 ;
  assign x952_PLUS_31__q3 = x__h3952 + 6'd31 ;
  assign x9685_PLUS_2__q17 = x__h49685 + 10'd2 ;
  assign x9845_PLUS_2__q18 = x__h49845 + 10'd2 ;
  assign xModeEnc__h51928 =
	     IF_m_intra8_io_out_get_93_BITS_1541_TO_1536_94_ETC___d715 +
	     6'd3 ;
  assign xModeEnc__h52070 =
	     (xModeMinus2__h51804 <= r_sortModeY[5:0]) ?
	       xModeMinus2__h51804 :
	       xModeMinus3__h51805 ;
  assign xModeEnc__h52103 =
	     (xModeMinus1__h51803 <= r_sortModeY[5:0]) ?
	       xModeMinus1__h51803 :
	       xModeMinus2__h51804 ;
  assign xModeMinus1__h51803 = m_intra8$io_out_get[1541:1536] - 6'd1 ;
  assign xModeMinus2__h51804 = m_intra8$io_out_get[1541:1536] - 6'd2 ;
  assign xModeMinus3__h51805 = m_intra8$io_out_get[1541:1536] - 6'd3 ;
  assign x__h27939 = { 1'b0, rcuX__h1924 } + 3'd1 ;
  assign x__h3950 = { 1'd0, x952_PLUS_1__q2[4:0] } ;
  assign x__h3952 = modeL__h1928 - 6'd2 ;
  assign x__h40307 = x__h40309 + y__h40310 ;
  assign x__h40309 = x__h40330 + y__h40331 ;
  assign x__h4033 = { 1'd0, x952_PLUS_31__q3[4:0] } ;
  assign x__h40330 = x__h40332 + y__h40333 ;
  assign x__h40332 = x__h40353 + y__h40354 ;
  assign x__h40353 = x__h40355 + y__h40356 ;
  assign x__h40355 = x__h40376 + y__h40377 ;
  assign x__h40376 = x__h40378 + y__h40379 ;
  assign x__h40378 = x__h40399 + y__h40400 ;
  assign x__h40399 = x__h40401 + y__h40402 ;
  assign x__h40401 = x__h40422 + y__h40423 ;
  assign x__h40422 = x__h40424 + y__h40425 ;
  assign x__h40424 = x__h40445 + y__h40446 ;
  assign x__h40445 = x__h40447 + y__h40448 ;
  assign x__h40447 = x__h40468 + y__h40469 ;
  assign x__h40468 = { 4'd0, r_ref_0[143:136] } ;
  assign x__h4266 = { x0LT1__h4088, x0LT2__h4089, x1LT2__h4090 } ;
  assign x__h46091 = x__h46093 + y__h46094 ;
  assign x__h46093 = x__h46095 + y__h46096 ;
  assign x__h46095 = { 2'd0, r_ref_0[263:256] } ;
  assign x__h46296 = x__h46298 + y__h46299 ;
  assign x__h46298 = x__h46300 + y__h46301 ;
  assign x__h46300 = { 2'd0, r_ref_0[255:248] } ;
  assign x__h46464 = x__h46466 + y__h46467 ;
  assign x__h46466 = y__h46094 + y__h46469 ;
  assign x__h46632 = x__h46634 + y__h46635 ;
  assign x__h46634 = y__h46299 + y__h46637 ;
  assign x__h46800 = x__h46802 + y__h46803 ;
  assign x__h46802 = y__h46467 + y__h46805 ;
  assign x__h46968 = x__h46970 + y__h46971 ;
  assign x__h46970 = y__h46635 + y__h46973 ;
  assign x__h47136 = x__h47138 + y__h47139 ;
  assign x__h47138 = y__h46803 + y__h47141 ;
  assign x__h47283 = x__h47285 + y__h47286 ;
  assign x__h47285 = y__h46971 + y__h47288 ;
  assign x__h47430 = x__h47432 + y__h47433 ;
  assign x__h47432 = y__h47139 + y__h47435 ;
  assign x__h47577 = x__h47579 + y__h47580 ;
  assign x__h47579 = y__h47286 + y__h47582 ;
  assign x__h47724 = x__h47726 + y__h47727 ;
  assign x__h47726 = y__h47433 + y__h47729 ;
  assign x__h47871 = x__h47873 + y__h47874 ;
  assign x__h47873 = y__h47580 + y__h47876 ;
  assign x__h48018 = x__h48020 + y__h48021 ;
  assign x__h48020 = y__h47727 + y__h48023 ;
  assign x__h48165 = x__h48167 + y__h48168 ;
  assign x__h48167 = y__h47874 + y__h48170 ;
  assign x__h48312 = x__h48314 + y__h48315 ;
  assign x__h48314 = y__h48021 + y__h48317 ;
  assign x__h49488 = x__h49490 + y__h49491 ;
  assign x__h49490 = x__h49492 + y__h49493 ;
  assign x__h49492 = { 2'd0, r_ref_0[119:112] } ;
  assign x__h49685 = x__h49687 + y__h49688 ;
  assign x__h49687 = x__h49689 + y__h49690 ;
  assign x__h49689 = { 2'd0, r_ref_0[111:104] } ;
  assign x__h49845 = x__h49847 + x__h49492 ;
  assign x__h49847 = x__h49849 + y__h49850 ;
  assign x__h49849 = { 2'd0, r_ref_0[103:96] } ;
  assign x__h50005 = x__h50007 + x__h49689 ;
  assign x__h50007 = x__h50009 + y__h50010 ;
  assign x__h50009 = { 2'd0, r_ref_0[95:88] } ;
  assign x__h50165 = x__h50167 + x__h49849 ;
  assign x__h50167 = x__h50169 + y__h50170 ;
  assign x__h50169 = { 2'd0, r_ref_0[87:80] } ;
  assign x__h50325 = x__h50327 + x__h50009 ;
  assign x__h50327 = x__h50329 + y__h50330 ;
  assign x__h50329 = { 2'd0, r_ref_0[79:72] } ;
  assign x__h50485 = x__h50487 + x__h50169 ;
  assign x__h50487 = x__h50489 + y__h50490 ;
  assign x__h50489 = { 2'd0, r_ref_0[71:64] } ;
  assign x__h50624 = x__h50626 + x__h50329 ;
  assign x__h50626 = x__h50628 + y__h50629 ;
  assign x__h50628 = { 2'd0, r_ref_0[63:56] } ;
  assign x__h50763 = x__h50765 + x__h50489 ;
  assign x__h50765 = x__h50767 + y__h50768 ;
  assign x__h50767 = { 2'd0, r_ref_0[55:48] } ;
  assign x__h50902 = x__h50904 + x__h50628 ;
  assign x__h50904 = x__h50906 + y__h50907 ;
  assign x__h50906 = { 2'd0, r_ref_0[47:40] } ;
  assign x__h51041 = x__h51043 + x__h50767 ;
  assign x__h51043 = x__h51045 + y__h51046 ;
  assign x__h51045 = { 2'd0, r_ref_0[39:32] } ;
  assign x__h51180 = x__h51182 + x__h50906 ;
  assign x__h51182 = x__h51184 + y__h51185 ;
  assign x__h51184 = { 2'd0, r_ref_0[31:24] } ;
  assign x__h51319 = x__h51321 + x__h51045 ;
  assign x__h51321 = x__h51323 + y__h51324 ;
  assign x__h51323 = { 2'd0, r_ref_0[23:16] } ;
  assign x__h51458 = x__h51460 + x__h51184 ;
  assign x__h51460 = x__h51462 + y__h51463 ;
  assign x__h51462 = { 2'd0, r_ref_0[15:8] } ;
  assign x__h51597 = x__h51599 + x__h51323 ;
  assign x__h51599 = y__h48315 + y__h51602 ;
  assign x__h51682 = x__h51684 + x__h51462 ;
  assign x__h51684 = y__h48168 + y__h51687 ;
  assign x__h51923 =
	     (m_intra8$io_out_get[1543:1542] == 2'd3) ?
	       xModeEnc__h51928 :
	       { 4'd0, m_intra8$io_out_get[1543:1542] } ;
  assign x__h5552 = { fWires_x[517:512], 2'b0 } + { 5'd0, r_cnt[2:0] } ;
  assign x__h70414 = { fWires_x[517:512], rcuX__h1924 } ;
  assign y__h40308 = { 4'd0, r_ref_0[71:64] } ;
  assign y__h40310 = { 4'd0, r_ref_0[199:192] } ;
  assign y__h40331 = { 4'd0, r_ref_0[63:56] } ;
  assign y__h40333 = { 4'd0, r_ref_0[191:184] } ;
  assign y__h40354 = { 4'd0, r_ref_0[55:48] } ;
  assign y__h40356 = { 4'd0, r_ref_0[183:176] } ;
  assign y__h40377 = { 4'd0, r_ref_0[47:40] } ;
  assign y__h40379 = { 4'd0, r_ref_0[175:168] } ;
  assign y__h40400 = { 4'd0, r_ref_0[39:32] } ;
  assign y__h40402 = { 4'd0, r_ref_0[167:160] } ;
  assign y__h40423 = { 4'd0, r_ref_0[31:24] } ;
  assign y__h40425 = { 4'd0, r_ref_0[159:152] } ;
  assign y__h40446 = { 4'd0, r_ref_0[23:16] } ;
  assign y__h40448 = { 4'd0, r_ref_0[151:144] } ;
  assign y__h40469 = { 4'd0, r_ref_0[15:8] } ;
  assign y__h46094 = { 2'd0, r_ref_0[247:240] } ;
  assign y__h46096 = { 1'd0, r_ref_0[255:248], 1'd0 } ;
  assign y__h46299 = { 2'd0, r_ref_0[239:232] } ;
  assign y__h46301 = { 1'd0, r_ref_0[247:240], 1'd0 } ;
  assign y__h46467 = { 2'd0, r_ref_0[231:224] } ;
  assign y__h46469 = { 1'd0, r_ref_0[239:232], 1'd0 } ;
  assign y__h46635 = { 2'd0, r_ref_0[223:216] } ;
  assign y__h46637 = { 1'd0, r_ref_0[231:224], 1'd0 } ;
  assign y__h46803 = { 2'd0, r_ref_0[215:208] } ;
  assign y__h46805 = { 1'd0, r_ref_0[223:216], 1'd0 } ;
  assign y__h46971 = { 2'd0, r_ref_0[207:200] } ;
  assign y__h46973 = { 1'd0, r_ref_0[215:208], 1'd0 } ;
  assign y__h47139 = { 2'd0, r_ref_0[199:192] } ;
  assign y__h47141 = { 1'd0, r_ref_0[207:200], 1'd0 } ;
  assign y__h47286 = { 2'd0, r_ref_0[191:184] } ;
  assign y__h47288 = { 1'd0, r_ref_0[199:192], 1'd0 } ;
  assign y__h47433 = { 2'd0, r_ref_0[183:176] } ;
  assign y__h47435 = { 1'd0, r_ref_0[191:184], 1'd0 } ;
  assign y__h47580 = { 2'd0, r_ref_0[175:168] } ;
  assign y__h47582 = { 1'd0, r_ref_0[183:176], 1'd0 } ;
  assign y__h47727 = { 2'd0, r_ref_0[167:160] } ;
  assign y__h47729 = { 1'd0, r_ref_0[175:168], 1'd0 } ;
  assign y__h47874 = { 2'd0, r_ref_0[159:152] } ;
  assign y__h47876 = { 1'd0, r_ref_0[167:160], 1'd0 } ;
  assign y__h48021 = { 2'd0, r_ref_0[151:144] } ;
  assign y__h48023 = { 1'd0, r_ref_0[159:152], 1'd0 } ;
  assign y__h48168 = { 2'd0, r_ref_0[143:136] } ;
  assign y__h48170 = { 1'd0, r_ref_0[151:144], 1'd0 } ;
  assign y__h48315 = { 2'd0, r_ref_0[7:0] } ;
  assign y__h48317 = { 1'd0, r_ref_0[143:136], 1'd0 } ;
  assign y__h49491 = { 2'd0, r_ref_0[135:128] } ;
  assign y__h49493 = { 1'd0, r_ref_0[127:120], 1'd0 } ;
  assign y__h49688 = { 2'd0, r_ref_0[127:120] } ;
  assign y__h49690 = { 1'd0, r_ref_0[119:112], 1'd0 } ;
  assign y__h49850 = { 1'd0, r_ref_0[111:104], 1'd0 } ;
  assign y__h50010 = { 1'd0, r_ref_0[103:96], 1'd0 } ;
  assign y__h50170 = { 1'd0, r_ref_0[95:88], 1'd0 } ;
  assign y__h50330 = { 1'd0, r_ref_0[87:80], 1'd0 } ;
  assign y__h50490 = { 1'd0, r_ref_0[79:72], 1'd0 } ;
  assign y__h50629 = { 1'd0, r_ref_0[71:64], 1'd0 } ;
  assign y__h50768 = { 1'd0, r_ref_0[63:56], 1'd0 } ;
  assign y__h50907 = { 1'd0, r_ref_0[55:48], 1'd0 } ;
  assign y__h51046 = { 1'd0, r_ref_0[47:40], 1'd0 } ;
  assign y__h51185 = { 1'd0, r_ref_0[39:32], 1'd0 } ;
  assign y__h51324 = { 1'd0, r_ref_0[31:24], 1'd0 } ;
  assign y__h51463 = { 1'd0, r_ref_0[23:16], 1'd0 } ;
  assign y__h51602 = { 1'd0, r_ref_0[15:8], 1'd0 } ;
  assign y__h51687 = { 1'd0, r_ref_0[7:0], 1'd0 } ;
  always@(r_zIdx or r_valid)
  begin
    case (r_zIdx)
      4'd0: valid__h1926 = r_valid[4:0];
      4'd1: valid__h1926 = r_valid[9:5];
      4'd2: valid__h1926 = r_valid[14:10];
      4'd3: valid__h1926 = r_valid[19:15];
      4'd4: valid__h1926 = r_valid[24:20];
      4'd5: valid__h1926 = r_valid[29:25];
      4'd6: valid__h1926 = r_valid[34:30];
      4'd7: valid__h1926 = r_valid[39:35];
      4'd8: valid__h1926 = r_valid[44:40];
      4'd9: valid__h1926 = r_valid[49:45];
      4'd10: valid__h1926 = r_valid[54:50];
      4'd11: valid__h1926 = r_valid[59:55];
      4'd12: valid__h1926 = r_valid[64:60];
      4'd13: valid__h1926 = r_valid[69:65];
      4'd14: valid__h1926 = r_valid[74:70];
      4'd15: valid__h1926 = r_valid[79:75];
    endcase
  end
  always@(rcuX__h1924 or r_topX)
  begin
    case (rcuX__h1924)
      2'd0: x1__h7496 = r_topX[63:0];
      2'd1: x1__h7496 = r_topX[127:64];
      2'd2: x1__h7496 = r_topX[191:128];
      2'd3: x1__h7496 = r_topX[255:192];
    endcase
  end
  always@(rcuX__h1924 or r_modeT)
  begin
    case (rcuX__h1924)
      2'd0: modeT__h1929 = r_modeT[5:0];
      2'd1: modeT__h1929 = r_modeT[11:6];
      2'd2: modeT__h1929 = r_modeT[17:12];
      2'd3: modeT__h1929 = r_modeT[23:18];
    endcase
  end
  always@(rcuY__h1925 or r_modeL)
  begin
    case (rcuY__h1925)
      2'd0:
	  CASE_rcuY925_0_r_modeL_BITS_5_TO_0_1_r_modeL_B_ETC__q1 =
	      r_modeL[5:0];
      2'd1:
	  CASE_rcuY925_0_r_modeL_BITS_5_TO_0_1_r_modeL_B_ETC__q1 =
	      r_modeL[11:6];
      2'd2:
	  CASE_rcuY925_0_r_modeL_BITS_5_TO_0_1_r_modeL_B_ETC__q1 =
	      r_modeL[17:12];
      2'd3:
	  CASE_rcuY925_0_r_modeL_BITS_5_TO_0_1_r_modeL_B_ETC__q1 =
	      r_modeL[23:18];
    endcase
  end
  always@(x__h27939 or r_topX)
  begin
    case (x__h27939)
      3'd0: x2__h7497 = r_topX[63:0];
      3'd1: x2__h7497 = r_topX[127:64];
      3'd2: x2__h7497 = r_topX[191:128];
      3'd3: x2__h7497 = r_topX[255:192];
      3'd4: x2__h7497 = r_topX[319:256];
      default: x2__h7497 =
		   64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(rcuY__h1925 or r_refL)
  begin
    case (rcuY__h1925)
      2'd0:
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228 =
	      { r_refL[7:0],
		r_refL[15:8],
		r_refL[23:16],
		r_refL[31:24],
		r_refL[39:32],
		r_refL[47:40],
		r_refL[55:48],
		r_refL[63:56],
		r_refL[71:64],
		r_refL[79:72],
		r_refL[87:80],
		r_refL[95:88],
		r_refL[103:96],
		r_refL[111:104],
		r_refL[119:112],
		r_refL[127:120] };
      2'd1:
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228 =
	      { r_refL[71:64],
		r_refL[79:72],
		r_refL[87:80],
		r_refL[95:88],
		r_refL[103:96],
		r_refL[111:104],
		r_refL[119:112],
		r_refL[127:120],
		r_refL[135:128],
		r_refL[143:136],
		r_refL[151:144],
		r_refL[159:152],
		r_refL[167:160],
		r_refL[175:168],
		r_refL[183:176],
		r_refL[191:184] };
      2'd2:
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228 =
	      { r_refL[135:128],
		r_refL[143:136],
		r_refL[151:144],
		r_refL[159:152],
		r_refL[167:160],
		r_refL[175:168],
		r_refL[183:176],
		r_refL[191:184],
		r_refL[199:192],
		r_refL[207:200],
		r_refL[215:208],
		r_refL[223:216],
		r_refL[231:224],
		r_refL[239:232],
		r_refL[247:240],
		r_refL[255:248] };
      2'd3:
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228 =
	      { r_refL[199:192],
		r_refL[207:200],
		r_refL[215:208],
		r_refL[223:216],
		r_refL[231:224],
		r_refL[239:232],
		r_refL[247:240],
		r_refL[255:248],
		64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
    endcase
  end
  always@(rcuY__h1925 or r_refL)
  begin
    case (rcuY__h1925)
      2'd0:
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d260 =
	      { r_refL[7:0],
		r_refL[15:8],
		r_refL[23:16],
		r_refL[31:24],
		r_refL[39:32],
		r_refL[47:40],
		r_refL[55:48],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56] };
      2'd1:
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d260 =
	      { r_refL[71:64],
		r_refL[79:72],
		r_refL[87:80],
		r_refL[95:88],
		r_refL[103:96],
		r_refL[111:104],
		r_refL[119:112],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120] };
      2'd2:
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d260 =
	      { r_refL[135:128],
		r_refL[143:136],
		r_refL[151:144],
		r_refL[159:152],
		r_refL[167:160],
		r_refL[175:168],
		r_refL[183:176],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184] };
      2'd3:
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d260 =
	      { r_refL[199:192],
		r_refL[207:200],
		r_refL[215:208],
		r_refL[223:216],
		r_refL[231:224],
		r_refL[239:232],
		r_refL[247:240],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248] };
    endcase
  end
  always@(rIdx__h1923 or
	  r_ltX_10 or
	  r_ltX_15 or
	  r_ltX_12 or
	  r_ltX_13 or
	  r_ltX_14 or
	  r_ltX_3 or
	  r_ltX_0 or
	  r_ltX_1 or
	  r_ltX_2 or
	  r_ltX_7 or
	  r_ltX_4 or r_ltX_5 or r_ltX_6 or r_ltX_11 or r_ltX_8 or r_ltX_9)
  begin
    case (rIdx__h1923)
      4'd0:
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d402 =
	      r_ltX_15;
      4'd1:
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d402 =
	      r_ltX_12;
      4'd2:
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d402 =
	      r_ltX_13;
      4'd3:
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d402 =
	      r_ltX_14;
      4'd4:
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d402 = r_ltX_3;
      4'd5:
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d402 = r_ltX_0;
      4'd6:
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d402 = r_ltX_1;
      4'd7:
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d402 = r_ltX_2;
      4'd8:
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d402 = r_ltX_7;
      4'd9:
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d402 = r_ltX_4;
      4'd10:
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d402 = r_ltX_5;
      4'd11:
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d402 = r_ltX_6;
      4'd12:
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d402 =
	      r_ltX_11;
      4'd13:
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d402 = r_ltX_8;
      4'd14:
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d402 = r_ltX_9;
      4'd15:
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d402 =
	      r_ltX_10;
    endcase
  end
  always@(rcuY__h1925 or r_refL)
  begin
    case (rcuY__h1925)
      2'd0:
	  CASE_rcuY925_0_r_refL_BITS_63_TO_56_CONCAT_r_r_ETC__q31 =
	      { r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:0] };
      2'd1:
	  CASE_rcuY925_0_r_refL_BITS_63_TO_56_CONCAT_r_r_ETC__q31 =
	      { r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:64] };
      2'd2:
	  CASE_rcuY925_0_r_refL_BITS_63_TO_56_CONCAT_r_r_ETC__q31 =
	      { r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:128] };
      2'd3:
	  CASE_rcuY925_0_r_refL_BITS_63_TO_56_CONCAT_r_r_ETC__q31 =
	      { r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:192] };
    endcase
  end
  always@(valid__h1926 or
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228 or
	  CASE_rcuY925_0_r_refL_BITS_63_TO_56_CONCAT_r_r_ETC__q31 or
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d260 or
	  x1__h7496)
  begin
    case (valid__h1926)
      5'b00010:
	  IF_SEL_ARR_r_valid_read_BITS_4_TO_0_0_r_valid__ETC___d304 =
	      CASE_rcuY925_0_r_refL_BITS_63_TO_56_CONCAT_r_r_ETC__q31;
      5'b00011:
	  IF_SEL_ARR_r_valid_read_BITS_4_TO_0_0_r_valid__ETC___d304 =
	      { IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[7:0],
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[15:8],
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[23:16],
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[31:24],
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[39:32],
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[47:40],
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[55:48],
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[63:56],
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[71:64],
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[79:72],
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[87:80],
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[95:88],
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[103:96],
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[111:104],
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[119:112],
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[127:120] };
      5'b01110, 5'b11110:
	  IF_SEL_ARR_r_valid_read_BITS_4_TO_0_0_r_valid__ETC___d304 =
	      { IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d260[7:0],
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d260[15:8],
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d260[23:16],
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d260[31:24],
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d260[39:32],
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d260[47:40],
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d260[55:48],
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d260[63:56],
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d260[71:64],
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d260[79:72],
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d260[87:80],
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d260[95:88],
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d260[103:96],
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d260[111:104],
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d260[119:112],
		IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d260[127:120] };
      5'b11000:
	  IF_SEL_ARR_r_valid_read_BITS_4_TO_0_0_r_valid__ETC___d304 =
	      {16{x1__h7496[7:0]}};
      default: IF_SEL_ARR_r_valid_read_BITS_4_TO_0_0_r_valid__ETC___d304 =
		   { IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[7:0],
		     IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[15:8],
		     IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[23:16],
		     IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[31:24],
		     IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[39:32],
		     IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[47:40],
		     IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[55:48],
		     IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[63:56],
		     IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[71:64],
		     IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[79:72],
		     IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[87:80],
		     IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[95:88],
		     IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[103:96],
		     IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[111:104],
		     IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[119:112],
		     IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d228[127:120] };
    endcase
  end
  always@(rcuY__h1925 or r_refL)
  begin
    case (rcuY__h1925)
      2'd0:
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d340 =
	      {17{r_refL[7:0]}};
      2'd1:
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d340 =
	      {17{r_refL[71:64]}};
      2'd2:
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d340 =
	      {17{r_refL[135:128]}};
      2'd3:
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d340 =
	      {17{r_refL[199:192]}};
    endcase
  end
  always@(valid__h1926 or
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d402 or
	  x1__h7496)
  begin
    case (valid__h1926)
      5'b01110:
	  CASE_valid926_0b1110_IF_r_zIdx_read__7_BIT_3_6_ETC__q32 =
	      IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d402;
      5'b11000:
	  CASE_valid926_0b1110_IF_r_zIdx_read__7_BIT_3_6_ETC__q32 =
	      x1__h7496[7:0];
      default: CASE_valid926_0b1110_IF_r_zIdx_read__7_BIT_3_6_ETC__q32 =
		   IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d402;
    endcase
  end
  always@(valid__h1926 or
	  IF_SEL_ARR_r_valid_read_BITS_4_TO_0_0_r_valid__ETC___d352 or
	  x1__h7496 or
	  CASE_valid926_0b1110_IF_r_zIdx_read__7_BIT_3_6_ETC__q32 or
	  IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d340)
  begin
    case (valid__h1926)
      5'b00010, 5'b00011:
	  IF_SEL_ARR_r_valid_read_BITS_4_TO_0_0_r_valid__ETC___d407 =
	      IF_r_zIdx_read__7_BIT_3_6_CONCAT_r_zIdx_read___ETC___d340;
      default: IF_SEL_ARR_r_valid_read_BITS_4_TO_0_0_r_valid__ETC___d407 =
		   { IF_SEL_ARR_r_valid_read_BITS_4_TO_0_0_r_valid__ETC___d352,
		     x1__h7496,
		     CASE_valid926_0b1110_IF_r_zIdx_read__7_BIT_3_6_ETC__q32 };
    endcase
  end
  always@(x__h4266 or r_mostModeY)
  begin
    case (x__h4266)
      3'b0:
	  CASE_x266_0b0_r_mostModeY_BITS_5_TO_0_CONCAT_r_ETC__q38 =
	      { r_mostModeY[5:0], r_mostModeY[11:6] };
      3'b001:
	  CASE_x266_0b0_r_mostModeY_BITS_5_TO_0_CONCAT_r_ETC__q38 =
	      { r_mostModeY[5:0], r_mostModeY[17:12] };
      3'b011:
	  CASE_x266_0b0_r_mostModeY_BITS_5_TO_0_CONCAT_r_ETC__q38 =
	      { r_mostModeY[17:12], r_mostModeY[5:0] };
      3'b100:
	  CASE_x266_0b0_r_mostModeY_BITS_5_TO_0_CONCAT_r_ETC__q38 =
	      r_mostModeY[11:0];
      3'b110:
	  CASE_x266_0b0_r_mostModeY_BITS_5_TO_0_CONCAT_r_ETC__q38 =
	      { r_mostModeY[11:6], r_mostModeY[17:12] };
      default: CASE_x266_0b0_r_mostModeY_BITS_5_TO_0_CONCAT_r_ETC__q38 =
		   r_mostModeY[17:6];
    endcase
  end
  always@(x__h4266 or r_mostModeY)
  begin
    case (x__h4266)
      3'b0, 3'b100:
	  CASE_x266_0b0_r_mostModeY_BITS_17_TO_12_0b1_r__ETC__q39 =
	      r_mostModeY[17:12];
      3'b001, 3'b011:
	  CASE_x266_0b0_r_mostModeY_BITS_17_TO_12_0b1_r__ETC__q39 =
	      r_mostModeY[11:6];
      default: CASE_x266_0b0_r_mostModeY_BITS_17_TO_12_0b1_r__ETC__q39 =
		   r_mostModeY[5:0];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        fifo_out_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      1041'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	r_cnt <= `BSV_ASSIGNMENT_DELAY 4'd15;
	r_zIdx <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (fifo_out_rv$EN)
	  fifo_out_rv <= `BSV_ASSIGNMENT_DELAY fifo_out_rv$D_IN;
	if (r_cnt$EN) r_cnt <= `BSV_ASSIGNMENT_DELAY r_cnt$D_IN;
	if (r_zIdx$EN) r_zIdx <= `BSV_ASSIGNMENT_DELAY r_zIdx$D_IN;
      end
    if (r_dcVal$EN) r_dcVal <= `BSV_ASSIGNMENT_DELAY r_dcVal$D_IN;
    if (r_ltX31$EN) r_ltX31 <= `BSV_ASSIGNMENT_DELAY r_ltX31$D_IN;
    if (r_ltX_0$EN) r_ltX_0 <= `BSV_ASSIGNMENT_DELAY r_ltX_0$D_IN;
    if (r_ltX_1$EN) r_ltX_1 <= `BSV_ASSIGNMENT_DELAY r_ltX_1$D_IN;
    if (r_ltX_10$EN) r_ltX_10 <= `BSV_ASSIGNMENT_DELAY r_ltX_10$D_IN;
    if (r_ltX_11$EN) r_ltX_11 <= `BSV_ASSIGNMENT_DELAY r_ltX_11$D_IN;
    if (r_ltX_12$EN) r_ltX_12 <= `BSV_ASSIGNMENT_DELAY r_ltX_12$D_IN;
    if (r_ltX_13$EN) r_ltX_13 <= `BSV_ASSIGNMENT_DELAY r_ltX_13$D_IN;
    if (r_ltX_14$EN) r_ltX_14 <= `BSV_ASSIGNMENT_DELAY r_ltX_14$D_IN;
    if (r_ltX_15$EN) r_ltX_15 <= `BSV_ASSIGNMENT_DELAY r_ltX_15$D_IN;
    if (r_ltX_2$EN) r_ltX_2 <= `BSV_ASSIGNMENT_DELAY r_ltX_2$D_IN;
    if (r_ltX_3$EN) r_ltX_3 <= `BSV_ASSIGNMENT_DELAY r_ltX_3$D_IN;
    if (r_ltX_4$EN) r_ltX_4 <= `BSV_ASSIGNMENT_DELAY r_ltX_4$D_IN;
    if (r_ltX_5$EN) r_ltX_5 <= `BSV_ASSIGNMENT_DELAY r_ltX_5$D_IN;
    if (r_ltX_6$EN) r_ltX_6 <= `BSV_ASSIGNMENT_DELAY r_ltX_6$D_IN;
    if (r_ltX_7$EN) r_ltX_7 <= `BSV_ASSIGNMENT_DELAY r_ltX_7$D_IN;
    if (r_ltX_8$EN) r_ltX_8 <= `BSV_ASSIGNMENT_DELAY r_ltX_8$D_IN;
    if (r_ltX_9$EN) r_ltX_9 <= `BSV_ASSIGNMENT_DELAY r_ltX_9$D_IN;
    if (r_modeL$EN) r_modeL <= `BSV_ASSIGNMENT_DELAY r_modeL$D_IN;
    if (r_modeT$EN) r_modeT <= `BSV_ASSIGNMENT_DELAY r_modeT$D_IN;
    if (r_mostModeY$EN) r_mostModeY <= `BSV_ASSIGNMENT_DELAY r_mostModeY$D_IN;
    if (r_recon$EN) r_recon <= `BSV_ASSIGNMENT_DELAY r_recon$D_IN;
    if (r_refL$EN) r_refL <= `BSV_ASSIGNMENT_DELAY r_refL$D_IN;
    if (r_ref_0$EN) r_ref_0 <= `BSV_ASSIGNMENT_DELAY r_ref_0$D_IN;
    if (r_ref_1$EN) r_ref_1 <= `BSV_ASSIGNMENT_DELAY r_ref_1$D_IN;
    if (r_sortModeY$EN) r_sortModeY <= `BSV_ASSIGNMENT_DELAY r_sortModeY$D_IN;
    if (r_tmpBuf$EN) r_tmpBuf <= `BSV_ASSIGNMENT_DELAY r_tmpBuf$D_IN;
    if (r_topX$EN) r_topX <= `BSV_ASSIGNMENT_DELAY r_topX$D_IN;
    if (r_valid$EN) r_valid <= `BSV_ASSIGNMENT_DELAY r_valid$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    fifo_out_rv =
	1042'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    r_cnt = 4'hA;
    r_dcVal = 8'hAA;
    r_ltX31 = 8'hAA;
    r_ltX_0 = 8'hAA;
    r_ltX_1 = 8'hAA;
    r_ltX_10 = 8'hAA;
    r_ltX_11 = 8'hAA;
    r_ltX_12 = 8'hAA;
    r_ltX_13 = 8'hAA;
    r_ltX_14 = 8'hAA;
    r_ltX_15 = 8'hAA;
    r_ltX_2 = 8'hAA;
    r_ltX_3 = 8'hAA;
    r_ltX_4 = 8'hAA;
    r_ltX_5 = 8'hAA;
    r_ltX_6 = 8'hAA;
    r_ltX_7 = 8'hAA;
    r_ltX_8 = 8'hAA;
    r_ltX_9 = 8'hAA;
    r_modeL = 24'hAAAAAA;
    r_modeT = 24'hAAAAAA;
    r_mostModeY = 18'h2AAAA;
    r_recon =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    r_refL =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    r_ref_0 =
	264'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    r_ref_1 =
	264'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    r_sortModeY = 18'h2AAAA;
    r_tmpBuf = 64'hAAAAAAAAAAAAAAAA;
    r_topX =
	320'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    r_valid = 80'hAAAAAAAAAAAAAAAAAAAA;
    r_zIdx = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s04_result && WILL_FIRE_RL_s00_refLT)
	$display("Error: \"mkIntraPredCtu.bsv\", line 372, column 9: (R0002)\n  Conflict-free rules RL_s04_result and RL_s00_refLT called conflicting\n  methods wset and wset of module instance w_refT.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s04_result && WILL_FIRE_RL_s00_refLT &&
	  _sub_RL_s00_refLT$EN_rf_refT$wget)
	$display("Error: \"mkIntraPredCtu.bsv\", line 372, column 9: (R0002)\n  Conflict-free rules RL_s04_result and RL_s00_refLT called conflicting\n  methods wset and whas of module instance w_refT.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s04_result && WILL_FIRE_RL_s00_refLT &&
	  _wget_RL_s00_refLT$EN_w_refT$wget)
	$display("Error: \"mkIntraPredCtu.bsv\", line 372, column 9: (R0002)\n  Conflict-free rules RL_s04_result and RL_s00_refLT called conflicting\n  methods wset and wget of module instance w_refT.\n");
  end
  // synopsys translate_on
endmodule  // mkIntraPredCtu

