//
// Generated by Bluespec Compiler, version 2021.06.chen (build f2da894e, 2021-06-19)
//
// On Mon Jul  5 21:38:44 CST 2021
//
//
// Ports:
// Name                         I/O  size props
// RDY_start                      O     1
// io_out_get                     O   532
// RDY_io_out_get                 O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// fWires_x                       I   528
// start_isFirstInRow             I     1
// EN_start                       I     1
// EN_io_out_get                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkIntraPredCtu(CLK,
		      RST_N,

		      fWires_x,

		      start_isFirstInRow,
		      EN_start,
		      RDY_start,

		      EN_io_out_get,
		      io_out_get,
		      RDY_io_out_get);
  input  CLK;
  input  RST_N;

  // action method fWires
  input  [527 : 0] fWires_x;

  // action method start
  input  start_isFirstInRow;
  input  EN_start;
  output RDY_start;

  // actionvalue method io_out_get
  input  EN_io_out_get;
  output [531 : 0] io_out_get;
  output RDY_io_out_get;

  // signals for module outputs
  wire [531 : 0] io_out_get;
  wire RDY_io_out_get, RDY_start;

  // inlined wires
  wire [532 : 0] fifo_out_rv$port0__write_1,
		 fifo_out_rv$port1__read,
		 fifo_out_rv$port1__write_1,
		 fifo_out_rv$port2__read;
  wire [72 : 0] w_refT$wget;
  wire _upd_RL_do_ram$EN_rf_refT$whas, w_refT$whas;

  // register fifo_out_rv
  reg [532 : 0] fifo_out_rv;
  wire [532 : 0] fifo_out_rv$D_IN;
  wire fifo_out_rv$EN;

  // register r_cnt
  reg [3 : 0] r_cnt;
  reg [3 : 0] r_cnt$D_IN;
  wire r_cnt$EN;

  // register r_dcVal
  reg [7 : 0] r_dcVal;
  wire [7 : 0] r_dcVal$D_IN;
  wire r_dcVal$EN;

  // register r_ltX_0
  reg [7 : 0] r_ltX_0;
  wire [7 : 0] r_ltX_0$D_IN;
  wire r_ltX_0$EN;

  // register r_ltX_1
  reg [7 : 0] r_ltX_1;
  wire [7 : 0] r_ltX_1$D_IN;
  wire r_ltX_1$EN;

  // register r_ltX_10
  reg [7 : 0] r_ltX_10;
  wire [7 : 0] r_ltX_10$D_IN;
  wire r_ltX_10$EN;

  // register r_ltX_11
  reg [7 : 0] r_ltX_11;
  wire [7 : 0] r_ltX_11$D_IN;
  wire r_ltX_11$EN;

  // register r_ltX_12
  reg [7 : 0] r_ltX_12;
  wire [7 : 0] r_ltX_12$D_IN;
  wire r_ltX_12$EN;

  // register r_ltX_13
  reg [7 : 0] r_ltX_13;
  wire [7 : 0] r_ltX_13$D_IN;
  wire r_ltX_13$EN;

  // register r_ltX_14
  reg [7 : 0] r_ltX_14;
  wire [7 : 0] r_ltX_14$D_IN;
  wire r_ltX_14$EN;

  // register r_ltX_15
  reg [7 : 0] r_ltX_15;
  wire [7 : 0] r_ltX_15$D_IN;
  wire r_ltX_15$EN;

  // register r_ltX_16
  reg [7 : 0] r_ltX_16;
  wire [7 : 0] r_ltX_16$D_IN;
  wire r_ltX_16$EN;

  // register r_ltX_17
  reg [7 : 0] r_ltX_17;
  wire [7 : 0] r_ltX_17$D_IN;
  wire r_ltX_17$EN;

  // register r_ltX_18
  reg [7 : 0] r_ltX_18;
  wire [7 : 0] r_ltX_18$D_IN;
  wire r_ltX_18$EN;

  // register r_ltX_19
  reg [7 : 0] r_ltX_19;
  wire [7 : 0] r_ltX_19$D_IN;
  wire r_ltX_19$EN;

  // register r_ltX_2
  reg [7 : 0] r_ltX_2;
  wire [7 : 0] r_ltX_2$D_IN;
  wire r_ltX_2$EN;

  // register r_ltX_20
  reg [7 : 0] r_ltX_20;
  wire [7 : 0] r_ltX_20$D_IN;
  wire r_ltX_20$EN;

  // register r_ltX_21
  reg [7 : 0] r_ltX_21;
  wire [7 : 0] r_ltX_21$D_IN;
  wire r_ltX_21$EN;

  // register r_ltX_22
  reg [7 : 0] r_ltX_22;
  wire [7 : 0] r_ltX_22$D_IN;
  wire r_ltX_22$EN;

  // register r_ltX_23
  reg [7 : 0] r_ltX_23;
  wire [7 : 0] r_ltX_23$D_IN;
  wire r_ltX_23$EN;

  // register r_ltX_24
  reg [7 : 0] r_ltX_24;
  wire [7 : 0] r_ltX_24$D_IN;
  wire r_ltX_24$EN;

  // register r_ltX_25
  reg [7 : 0] r_ltX_25;
  wire [7 : 0] r_ltX_25$D_IN;
  wire r_ltX_25$EN;

  // register r_ltX_26
  reg [7 : 0] r_ltX_26;
  wire [7 : 0] r_ltX_26$D_IN;
  wire r_ltX_26$EN;

  // register r_ltX_27
  reg [7 : 0] r_ltX_27;
  wire [7 : 0] r_ltX_27$D_IN;
  wire r_ltX_27$EN;

  // register r_ltX_28
  reg [7 : 0] r_ltX_28;
  wire [7 : 0] r_ltX_28$D_IN;
  wire r_ltX_28$EN;

  // register r_ltX_29
  reg [7 : 0] r_ltX_29;
  wire [7 : 0] r_ltX_29$D_IN;
  wire r_ltX_29$EN;

  // register r_ltX_3
  reg [7 : 0] r_ltX_3;
  wire [7 : 0] r_ltX_3$D_IN;
  wire r_ltX_3$EN;

  // register r_ltX_30
  reg [7 : 0] r_ltX_30;
  wire [7 : 0] r_ltX_30$D_IN;
  wire r_ltX_30$EN;

  // register r_ltX_31
  reg [7 : 0] r_ltX_31;
  wire [7 : 0] r_ltX_31$D_IN;
  wire r_ltX_31$EN;

  // register r_ltX_4
  reg [7 : 0] r_ltX_4;
  wire [7 : 0] r_ltX_4$D_IN;
  wire r_ltX_4$EN;

  // register r_ltX_5
  reg [7 : 0] r_ltX_5;
  wire [7 : 0] r_ltX_5$D_IN;
  wire r_ltX_5$EN;

  // register r_ltX_6
  reg [7 : 0] r_ltX_6;
  wire [7 : 0] r_ltX_6$D_IN;
  wire r_ltX_6$EN;

  // register r_ltX_7
  reg [7 : 0] r_ltX_7;
  wire [7 : 0] r_ltX_7$D_IN;
  wire r_ltX_7$EN;

  // register r_ltX_8
  reg [7 : 0] r_ltX_8;
  wire [7 : 0] r_ltX_8$D_IN;
  wire r_ltX_8$EN;

  // register r_ltX_9
  reg [7 : 0] r_ltX_9;
  wire [7 : 0] r_ltX_9$D_IN;
  wire r_ltX_9$EN;

  // register r_recon
  reg [511 : 0] r_recon;
  wire [511 : 0] r_recon$D_IN;
  wire r_recon$EN;

  // register r_refL
  reg [255 : 0] r_refL;
  wire [255 : 0] r_refL$D_IN;
  wire r_refL$EN;

  // register r_ref_0
  reg [263 : 0] r_ref_0;
  wire [263 : 0] r_ref_0$D_IN;
  wire r_ref_0$EN;

  // register r_ref_1
  reg [263 : 0] r_ref_1;
  wire [263 : 0] r_ref_1$D_IN;
  wire r_ref_1$EN;

  // register r_tmpBuf
  reg [63 : 0] r_tmpBuf;
  wire [63 : 0] r_tmpBuf$D_IN;
  wire r_tmpBuf$EN;

  // register r_topX
  reg [319 : 0] r_topX;
  wire [319 : 0] r_topX$D_IN;
  wire r_topX$EN;

  // register r_topX31
  reg [7 : 0] r_topX31;
  wire [7 : 0] r_topX31$D_IN;
  wire r_topX31$EN;

  // register r_valid
  reg [79 : 0] r_valid;
  wire [79 : 0] r_valid$D_IN;
  wire r_valid$EN;

  // register r_zIdx
  reg [3 : 0] r_zIdx;
  wire [3 : 0] r_zIdx$D_IN;
  wire r_zIdx$EN;

  // ports of submodule m_intra8
  wire [1053 : 0] m_intra8$fWires_x;
  wire [531 : 0] m_intra8$io_out_get;
  wire m_intra8$EN_io_out_get,
       m_intra8$EN_startPred,
       m_intra8$RDY_io_out_get,
       m_intra8$RDY_startPred;

  // ports of submodule rf_refT
  wire [63 : 0] rf_refT$D_IN, rf_refT$D_OUT_1;
  wire [7 : 0] rf_refT$ADDR_1,
	       rf_refT$ADDR_2,
	       rf_refT$ADDR_3,
	       rf_refT$ADDR_4,
	       rf_refT$ADDR_5,
	       rf_refT$ADDR_IN;
  wire rf_refT$WE;

  // rule scheduling signals
  wire WILL_FIRE_RL_s00_refLT;

  // inputs to muxes for submodule ports
  reg [255 : 0] MUX_r_refL$write_1__VAL_2;
  wire [319 : 0] MUX_r_topX$write_1__VAL_1, MUX_r_topX$write_1__VAL_2;
  wire [72 : 0] MUX_w_refT$wset_1__VAL_1, MUX_w_refT$wset_1__VAL_2;
  wire [7 : 0] MUX_r_ltX_15$write_1__VAL_1,
	       MUX_r_ltX_23$write_1__VAL_1,
	       MUX_r_ltX_31$write_1__VAL_1,
	       MUX_r_ltX_7$write_1__VAL_1;
  wire [3 : 0] MUX_r_cnt$write_1__VAL_1,
	       MUX_r_cnt$write_1__VAL_2,
	       MUX_r_zIdx$write_1__VAL_1;
  wire MUX_r_cnt$write_1__SEL_1,
       MUX_r_cnt$write_1__SEL_2,
       MUX_r_ltX_0$write_1__SEL_1,
       MUX_r_ltX_1$write_1__SEL_1,
       MUX_r_ltX_10$write_1__SEL_1,
       MUX_r_ltX_11$write_1__SEL_1,
       MUX_r_ltX_12$write_1__SEL_1,
       MUX_r_ltX_13$write_1__SEL_1,
       MUX_r_ltX_14$write_1__SEL_1,
       MUX_r_ltX_15$write_1__SEL_1,
       MUX_r_ltX_16$write_1__SEL_1,
       MUX_r_ltX_17$write_1__SEL_1,
       MUX_r_ltX_18$write_1__SEL_1,
       MUX_r_ltX_19$write_1__SEL_1,
       MUX_r_ltX_2$write_1__SEL_1,
       MUX_r_ltX_20$write_1__SEL_1,
       MUX_r_ltX_21$write_1__SEL_1,
       MUX_r_ltX_22$write_1__SEL_1,
       MUX_r_ltX_23$write_1__SEL_1,
       MUX_r_ltX_24$write_1__SEL_1,
       MUX_r_ltX_25$write_1__SEL_1,
       MUX_r_ltX_26$write_1__SEL_1,
       MUX_r_ltX_27$write_1__SEL_1,
       MUX_r_ltX_28$write_1__SEL_1,
       MUX_r_ltX_29$write_1__SEL_1,
       MUX_r_ltX_3$write_1__SEL_1,
       MUX_r_ltX_30$write_1__SEL_1,
       MUX_r_ltX_31$write_1__SEL_1,
       MUX_r_ltX_4$write_1__SEL_1,
       MUX_r_ltX_5$write_1__SEL_1,
       MUX_r_ltX_6$write_1__SEL_1,
       MUX_r_ltX_7$write_1__SEL_1,
       MUX_r_ltX_8$write_1__SEL_1,
       MUX_r_ltX_9$write_1__SEL_1,
       MUX_r_refL$write_1__SEL_1;

  // remaining internal signals
  reg [135 : 0] IF_SEL_ARR_r_valid_read__5_BITS_4_TO_0_6_r_val_ETC___d356,
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d302;
  reg [127 : 0] IF_SEL_ARR_r_valid_read__5_BITS_4_TO_0_6_r_val_ETC___d266,
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d135,
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187,
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d219;
  reg [63 : 0] x1__h5286, x2__h5287;
  reg [7 : 0] CASE_valid681_0b1110_SEL_ARR_r_ltX_0_read__15__ETC__q28,
	      SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351;
  reg [4 : 0] valid__h2681;
  wire [191 : 0] IF_r_cnt_read_EQ_4_5_THEN_rf_refT_sub_IF_w_ref_ETC___d65;
  wire [127 : 0] r_ref_0_read__59_BITS_135_TO_128_17_CONCAT_0_C_ETC___d623;
  wire [103 : 0] r_ref_0_read__59_BITS_263_TO_256_09_CONCAT_0_C_ETC___d496;
  wire [95 : 0] r_ref_0_read__59_BITS_135_TO_128_17_CONCAT_0_C_ETC___d598;
  wire [71 : 0] r_ref_0_read__59_BITS_263_TO_256_09_CONCAT_0_C_ETC___d470;
  wire [63 : 0] IF_SEL_ARR_r_valid_read__5_BITS_4_TO_0_6_r_val_ETC___d314,
		r_ref_0_read__59_BITS_135_TO_128_17_CONCAT_0_C_ETC___d572,
		refLx__h57948;
  wire [39 : 0] r_ref_0_read__59_BITS_263_TO_256_09_CONCAT_0_C_ETC___d442;
  wire [11 : 0] x8088_PLUS_y8089_PLUS_8__q29,
		x__h38088,
		x__h38090,
		x__h38111,
		x__h38113,
		x__h38134,
		x__h38136,
		x__h38157,
		x__h38159,
		x__h38180,
		x__h38182,
		x__h38203,
		x__h38205,
		x__h38226,
		x__h38228,
		x__h38249,
		y__h38089,
		y__h38091,
		y__h38112,
		y__h38114,
		y__h38135,
		y__h38137,
		y__h38158,
		y__h38160,
		y__h38181,
		y__h38183,
		y__h38204,
		y__h38206,
		y__h38227,
		y__h38229,
		y__h38250;
  wire [9 : 0] x3872_PLUS_2__q1,
	       x4077_PLUS_2__q2,
	       x4245_PLUS_2__q3,
	       x4413_PLUS_2__q4,
	       x4581_PLUS_2__q5,
	       x4749_PLUS_2__q6,
	       x4917_PLUS_2__q7,
	       x5064_PLUS_2__q8,
	       x5211_PLUS_2__q9,
	       x5358_PLUS_2__q10,
	       x5505_PLUS_2__q11,
	       x5652_PLUS_2__q12,
	       x5799_PLUS_2__q30,
	       x5946_PLUS_2__q31,
	       x6093_PLUS_2__q32,
	       x7269_PLUS_2__q13,
	       x7466_PLUS_2__q14,
	       x7626_PLUS_2__q15,
	       x7786_PLUS_2__q16,
	       x7946_PLUS_2__q17,
	       x8106_PLUS_2__q18,
	       x8266_PLUS_2__q19,
	       x8405_PLUS_2__q20,
	       x8544_PLUS_2__q21,
	       x8683_PLUS_2__q22,
	       x8822_PLUS_2__q23,
	       x8961_PLUS_2__q24,
	       x9100_PLUS_2__q25,
	       x9239_PLUS_2__q26,
	       x9378_PLUS_2__q27,
	       x9463_PLUS_2__q33,
	       x__h43872,
	       x__h43874,
	       x__h43876,
	       x__h44077,
	       x__h44079,
	       x__h44081,
	       x__h44245,
	       x__h44247,
	       x__h44413,
	       x__h44415,
	       x__h44581,
	       x__h44583,
	       x__h44749,
	       x__h44751,
	       x__h44917,
	       x__h44919,
	       x__h45064,
	       x__h45066,
	       x__h45211,
	       x__h45213,
	       x__h45358,
	       x__h45360,
	       x__h45505,
	       x__h45507,
	       x__h45652,
	       x__h45654,
	       x__h45799,
	       x__h45801,
	       x__h45946,
	       x__h45948,
	       x__h46093,
	       x__h46095,
	       x__h47269,
	       x__h47271,
	       x__h47273,
	       x__h47466,
	       x__h47468,
	       x__h47470,
	       x__h47626,
	       x__h47628,
	       x__h47630,
	       x__h47786,
	       x__h47788,
	       x__h47790,
	       x__h47946,
	       x__h47948,
	       x__h47950,
	       x__h48106,
	       x__h48108,
	       x__h48110,
	       x__h48266,
	       x__h48268,
	       x__h48270,
	       x__h48405,
	       x__h48407,
	       x__h48409,
	       x__h48544,
	       x__h48546,
	       x__h48548,
	       x__h48683,
	       x__h48685,
	       x__h48687,
	       x__h48822,
	       x__h48824,
	       x__h48826,
	       x__h48961,
	       x__h48963,
	       x__h48965,
	       x__h49100,
	       x__h49102,
	       x__h49104,
	       x__h49239,
	       x__h49241,
	       x__h49243,
	       x__h49378,
	       x__h49380,
	       x__h49463,
	       x__h49465,
	       y__h43875,
	       y__h43877,
	       y__h44080,
	       y__h44082,
	       y__h44248,
	       y__h44250,
	       y__h44416,
	       y__h44418,
	       y__h44584,
	       y__h44586,
	       y__h44752,
	       y__h44754,
	       y__h44920,
	       y__h44922,
	       y__h45067,
	       y__h45069,
	       y__h45214,
	       y__h45216,
	       y__h45361,
	       y__h45363,
	       y__h45508,
	       y__h45510,
	       y__h45655,
	       y__h45657,
	       y__h45802,
	       y__h45804,
	       y__h45949,
	       y__h45951,
	       y__h46096,
	       y__h46098,
	       y__h47272,
	       y__h47274,
	       y__h47469,
	       y__h47471,
	       y__h47631,
	       y__h47791,
	       y__h47951,
	       y__h48111,
	       y__h48271,
	       y__h48410,
	       y__h48549,
	       y__h48688,
	       y__h48827,
	       y__h48966,
	       y__h49105,
	       y__h49244,
	       y__h49383,
	       y__h49468;
  wire [7 : 0] x__h2845, x__h65659;
  wire [4 : 0] ltIdx__h68422, x__h24330, x__h2910;
  wire [2 : 0] x__h25752;
  wire [1 : 0] rcuX__h2679, rcuY__h2680;
  wire _dfoo1, _dfoo3, _dfoo5, _dfoo7;

  // action method start
  assign RDY_start = r_cnt == 4'd15 ;

  // actionvalue method io_out_get
  assign io_out_get = fifo_out_rv[531:0] ;
  assign RDY_io_out_get = fifo_out_rv[532] ;

  // submodule m_intra8
  mkIntraPred8 m_intra8(.CLK(CLK),
			.RST_N(RST_N),
			.fWires_x(m_intra8$fWires_x),
			.EN_startPred(m_intra8$EN_startPred),
			.EN_io_out_get(m_intra8$EN_io_out_get),
			.RDY_startPred(m_intra8$RDY_startPred),
			.io_out_get(m_intra8$io_out_get),
			.RDY_io_out_get(m_intra8$RDY_io_out_get));

  // submodule rf_refT
  RegFile #(.addr_width(32'd8),
	    .data_width(32'd64),
	    .lo(8'd0),
	    .hi(8'd255)) rf_refT(.CLK(CLK),
				 .ADDR_1(rf_refT$ADDR_1),
				 .ADDR_2(rf_refT$ADDR_2),
				 .ADDR_3(rf_refT$ADDR_3),
				 .ADDR_4(rf_refT$ADDR_4),
				 .ADDR_5(rf_refT$ADDR_5),
				 .ADDR_IN(rf_refT$ADDR_IN),
				 .D_IN(rf_refT$D_IN),
				 .WE(rf_refT$WE),
				 .D_OUT_1(rf_refT$D_OUT_1),
				 .D_OUT_2(),
				 .D_OUT_3(),
				 .D_OUT_4(),
				 .D_OUT_5());

  // rule RL_s00_refLT
  assign WILL_FIRE_RL_s00_refLT = r_cnt <= 4'd4 ;

  // inputs to muxes for submodule ports
  assign MUX_r_cnt$write_1__SEL_1 =
	     m_intra8$RDY_io_out_get && !fifo_out_rv$port1__read[532] &&
	     r_cnt != 4'd15 ;
  assign MUX_r_cnt$write_1__SEL_2 = r_cnt <= 4'd7 ;
  assign MUX_r_ltX_0$write_1__SEL_1 =
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd0 &&
	     r_zIdx != 4'd15 ;
  assign MUX_r_ltX_1$write_1__SEL_1 =
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd1 &&
	     r_zIdx != 4'd15 ;
  assign MUX_r_ltX_10$write_1__SEL_1 =
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd10 &&
	     r_zIdx != 4'd15 ;
  assign MUX_r_ltX_11$write_1__SEL_1 =
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd11 &&
	     r_zIdx != 4'd15 ;
  assign MUX_r_ltX_12$write_1__SEL_1 =
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd12 &&
	     r_zIdx != 4'd15 ;
  assign MUX_r_ltX_13$write_1__SEL_1 =
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd13 &&
	     r_zIdx != 4'd15 ;
  assign MUX_r_ltX_14$write_1__SEL_1 =
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd14 &&
	     r_zIdx != 4'd15 ;
  assign MUX_r_ltX_15$write_1__SEL_1 = MUX_r_cnt$write_1__SEL_1 && _dfoo5 ;
  assign MUX_r_ltX_16$write_1__SEL_1 =
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd16 &&
	     r_zIdx != 4'd15 ;
  assign MUX_r_ltX_17$write_1__SEL_1 =
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd17 &&
	     r_zIdx != 4'd15 ;
  assign MUX_r_ltX_18$write_1__SEL_1 =
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd18 &&
	     r_zIdx != 4'd15 ;
  assign MUX_r_ltX_19$write_1__SEL_1 =
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd19 &&
	     r_zIdx != 4'd15 ;
  assign MUX_r_ltX_2$write_1__SEL_1 =
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd2 &&
	     r_zIdx != 4'd15 ;
  assign MUX_r_ltX_20$write_1__SEL_1 =
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd20 &&
	     r_zIdx != 4'd15 ;
  assign MUX_r_ltX_21$write_1__SEL_1 =
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd21 &&
	     r_zIdx != 4'd15 ;
  assign MUX_r_ltX_22$write_1__SEL_1 =
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd22 &&
	     r_zIdx != 4'd15 ;
  assign MUX_r_ltX_23$write_1__SEL_1 = MUX_r_cnt$write_1__SEL_1 && _dfoo3 ;
  assign MUX_r_ltX_24$write_1__SEL_1 =
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd24 &&
	     r_zIdx != 4'd15 ;
  assign MUX_r_ltX_25$write_1__SEL_1 =
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd25 &&
	     r_zIdx != 4'd15 ;
  assign MUX_r_ltX_26$write_1__SEL_1 =
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd26 &&
	     r_zIdx != 4'd15 ;
  assign MUX_r_ltX_27$write_1__SEL_1 =
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd27 &&
	     r_zIdx != 4'd15 ;
  assign MUX_r_ltX_28$write_1__SEL_1 =
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd28 &&
	     r_zIdx != 4'd15 ;
  assign MUX_r_ltX_29$write_1__SEL_1 =
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd29 &&
	     r_zIdx != 4'd15 ;
  assign MUX_r_ltX_3$write_1__SEL_1 =
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd3 &&
	     r_zIdx != 4'd15 ;
  assign MUX_r_ltX_30$write_1__SEL_1 =
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd30 &&
	     r_zIdx != 4'd15 ;
  assign MUX_r_ltX_31$write_1__SEL_1 = MUX_r_cnt$write_1__SEL_1 && _dfoo1 ;
  assign MUX_r_ltX_4$write_1__SEL_1 =
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd4 &&
	     r_zIdx != 4'd15 ;
  assign MUX_r_ltX_5$write_1__SEL_1 =
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd5 &&
	     r_zIdx != 4'd15 ;
  assign MUX_r_ltX_6$write_1__SEL_1 =
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd6 &&
	     r_zIdx != 4'd15 ;
  assign MUX_r_ltX_7$write_1__SEL_1 = MUX_r_cnt$write_1__SEL_1 && _dfoo7 ;
  assign MUX_r_ltX_8$write_1__SEL_1 =
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd8 &&
	     r_zIdx != 4'd15 ;
  assign MUX_r_ltX_9$write_1__SEL_1 =
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd9 &&
	     r_zIdx != 4'd15 ;
  assign MUX_r_refL$write_1__SEL_1 = EN_start && start_isFirstInRow ;
  assign MUX_r_cnt$write_1__VAL_1 = (r_zIdx == 4'd15) ? r_zIdx : 4'd5 ;
  assign MUX_r_cnt$write_1__VAL_2 = r_cnt + 4'd1 ;
  assign MUX_r_ltX_15$write_1__VAL_1 =
	     (r_zIdx == 4'd15) ? r_ltX_11 : m_intra8$io_out_get[511:504] ;
  assign MUX_r_ltX_23$write_1__VAL_1 =
	     (r_zIdx == 4'd15) ? r_ltX_19 : m_intra8$io_out_get[511:504] ;
  assign MUX_r_ltX_31$write_1__VAL_1 =
	     (r_zIdx == 4'd15) ? r_topX31 : m_intra8$io_out_get[511:504] ;
  assign MUX_r_ltX_7$write_1__VAL_1 =
	     (r_zIdx == 4'd15) ? r_ltX_3 : m_intra8$io_out_get[511:504] ;
  always@(rcuY__h2680 or refLx__h57948 or r_refL)
  begin
    case (rcuY__h2680)
      2'd0: MUX_r_refL$write_1__VAL_2 = { r_refL[255:64], refLx__h57948 };
      2'd1:
	  MUX_r_refL$write_1__VAL_2 =
	      { r_refL[255:128], refLx__h57948, r_refL[63:0] };
      2'd2:
	  MUX_r_refL$write_1__VAL_2 =
	      { r_refL[255:192], refLx__h57948, r_refL[127:0] };
      2'd3: MUX_r_refL$write_1__VAL_2 = { refLx__h57948, r_refL[191:0] };
    endcase
  end
  assign MUX_r_topX$write_1__VAL_1 =
	     { r_topX[319:256],
	       (rcuX__h2679 == 2'd3) ?
		 m_intra8$io_out_get[511:448] :
		 r_topX[255:192],
	       (rcuX__h2679 == 2'd2) ?
		 m_intra8$io_out_get[511:448] :
		 r_topX[191:128],
	       (rcuX__h2679 == 2'd1) ?
		 m_intra8$io_out_get[511:448] :
		 r_topX[127:64],
	       (rcuX__h2679 == 2'd0) ?
		 m_intra8$io_out_get[511:448] :
		 r_topX[63:0] } ;
  assign MUX_r_topX$write_1__VAL_2 =
	     { IF_r_cnt_read_EQ_4_5_THEN_rf_refT_sub_IF_w_ref_ETC___d65,
	       (r_cnt == 4'd1) ? rf_refT$D_OUT_1 : r_topX[127:64],
	       (r_cnt == 4'd0) ? rf_refT$D_OUT_1 : r_topX[63:0] } ;
  assign MUX_r_zIdx$write_1__VAL_1 = r_zIdx + 4'd1 ;
  assign MUX_w_refT$wset_1__VAL_1 =
	     { 1'd1, x__h65659, m_intra8$io_out_get[511:448] } ;
  assign MUX_w_refT$wset_1__VAL_2 =
	     { 1'd0,
	       x__h2845,
	       64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;

  // inlined wires
  assign w_refT$wget =
	     MUX_r_cnt$write_1__SEL_1 ?
	       MUX_w_refT$wset_1__VAL_1 :
	       MUX_w_refT$wset_1__VAL_2 ;
  assign w_refT$whas = WILL_FIRE_RL_s00_refLT || MUX_r_cnt$write_1__SEL_1 ;
  assign _upd_RL_do_ram$EN_rf_refT$whas = w_refT$whas && w_refT$wget[72] ;
  assign fifo_out_rv$port0__write_1 =
	     { 1'd0,
	       532'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign fifo_out_rv$port1__read =
	     EN_io_out_get ? fifo_out_rv$port0__write_1 : fifo_out_rv ;
  assign fifo_out_rv$port1__write_1 = { 1'd1, m_intra8$io_out_get } ;
  assign fifo_out_rv$port2__read =
	     MUX_r_cnt$write_1__SEL_1 ?
	       fifo_out_rv$port1__write_1 :
	       fifo_out_rv$port1__read ;

  // register fifo_out_rv
  assign fifo_out_rv$D_IN = fifo_out_rv$port2__read ;
  assign fifo_out_rv$EN = 1'b1 ;

  // register r_cnt
  always@(MUX_r_cnt$write_1__SEL_1 or
	  MUX_r_cnt$write_1__VAL_1 or
	  MUX_r_cnt$write_1__SEL_2 or MUX_r_cnt$write_1__VAL_2 or EN_start)
  case (1'b1)
    MUX_r_cnt$write_1__SEL_1: r_cnt$D_IN = MUX_r_cnt$write_1__VAL_1;
    MUX_r_cnt$write_1__SEL_2: r_cnt$D_IN = MUX_r_cnt$write_1__VAL_2;
    EN_start: r_cnt$D_IN = 4'd0;
    default: r_cnt$D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign r_cnt$EN =
	     MUX_r_cnt$write_1__SEL_2 || MUX_r_cnt$write_1__SEL_1 ||
	     EN_start ;

  // register r_dcVal
  assign r_dcVal$D_IN = x8088_PLUS_y8089_PLUS_8__q29[11:4] ;
  assign r_dcVal$EN = r_cnt == 4'd6 ;

  // register r_ltX_0
  assign r_ltX_0$D_IN =
	     MUX_r_ltX_0$write_1__SEL_1 ?
	       m_intra8$io_out_get[511:504] :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_0$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd0 ||
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd0 &&
	     r_zIdx != 4'd15 ;

  // register r_ltX_1
  assign r_ltX_1$D_IN =
	     MUX_r_ltX_1$write_1__SEL_1 ?
	       m_intra8$io_out_get[511:504] :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_1$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd1 ||
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd1 &&
	     r_zIdx != 4'd15 ;

  // register r_ltX_10
  assign r_ltX_10$D_IN =
	     MUX_r_ltX_10$write_1__SEL_1 ?
	       m_intra8$io_out_get[511:504] :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_10$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd10 ||
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd10 &&
	     r_zIdx != 4'd15 ;

  // register r_ltX_11
  assign r_ltX_11$D_IN =
	     MUX_r_ltX_11$write_1__SEL_1 ?
	       m_intra8$io_out_get[511:504] :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_11$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd11 ||
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd11 &&
	     r_zIdx != 4'd15 ;

  // register r_ltX_12
  assign r_ltX_12$D_IN =
	     MUX_r_ltX_12$write_1__SEL_1 ?
	       m_intra8$io_out_get[511:504] :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_12$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd12 ||
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd12 &&
	     r_zIdx != 4'd15 ;

  // register r_ltX_13
  assign r_ltX_13$D_IN =
	     MUX_r_ltX_13$write_1__SEL_1 ?
	       m_intra8$io_out_get[511:504] :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_13$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd13 ||
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd13 &&
	     r_zIdx != 4'd15 ;

  // register r_ltX_14
  assign r_ltX_14$D_IN =
	     MUX_r_ltX_14$write_1__SEL_1 ?
	       m_intra8$io_out_get[511:504] :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_14$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd14 ||
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd14 &&
	     r_zIdx != 4'd15 ;

  // register r_ltX_15
  assign r_ltX_15$D_IN =
	     MUX_r_ltX_15$write_1__SEL_1 ?
	       MUX_r_ltX_15$write_1__VAL_1 :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_15$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd15 ||
	     MUX_r_cnt$write_1__SEL_1 && _dfoo5 ;

  // register r_ltX_16
  assign r_ltX_16$D_IN =
	     MUX_r_ltX_16$write_1__SEL_1 ?
	       m_intra8$io_out_get[511:504] :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_16$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd16 ||
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd16 &&
	     r_zIdx != 4'd15 ;

  // register r_ltX_17
  assign r_ltX_17$D_IN =
	     MUX_r_ltX_17$write_1__SEL_1 ?
	       m_intra8$io_out_get[511:504] :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_17$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd17 ||
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd17 &&
	     r_zIdx != 4'd15 ;

  // register r_ltX_18
  assign r_ltX_18$D_IN =
	     MUX_r_ltX_18$write_1__SEL_1 ?
	       m_intra8$io_out_get[511:504] :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_18$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd18 ||
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd18 &&
	     r_zIdx != 4'd15 ;

  // register r_ltX_19
  assign r_ltX_19$D_IN =
	     MUX_r_ltX_19$write_1__SEL_1 ?
	       m_intra8$io_out_get[511:504] :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_19$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd19 ||
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd19 &&
	     r_zIdx != 4'd15 ;

  // register r_ltX_2
  assign r_ltX_2$D_IN =
	     MUX_r_ltX_2$write_1__SEL_1 ?
	       m_intra8$io_out_get[511:504] :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_2$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd2 ||
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd2 &&
	     r_zIdx != 4'd15 ;

  // register r_ltX_20
  assign r_ltX_20$D_IN =
	     MUX_r_ltX_20$write_1__SEL_1 ?
	       m_intra8$io_out_get[511:504] :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_20$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd20 ||
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd20 &&
	     r_zIdx != 4'd15 ;

  // register r_ltX_21
  assign r_ltX_21$D_IN =
	     MUX_r_ltX_21$write_1__SEL_1 ?
	       m_intra8$io_out_get[511:504] :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_21$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd21 ||
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd21 &&
	     r_zIdx != 4'd15 ;

  // register r_ltX_22
  assign r_ltX_22$D_IN =
	     MUX_r_ltX_22$write_1__SEL_1 ?
	       m_intra8$io_out_get[511:504] :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_22$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd22 ||
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd22 &&
	     r_zIdx != 4'd15 ;

  // register r_ltX_23
  assign r_ltX_23$D_IN =
	     MUX_r_ltX_23$write_1__SEL_1 ?
	       MUX_r_ltX_23$write_1__VAL_1 :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_23$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd23 ||
	     MUX_r_cnt$write_1__SEL_1 && _dfoo3 ;

  // register r_ltX_24
  assign r_ltX_24$D_IN =
	     MUX_r_ltX_24$write_1__SEL_1 ?
	       m_intra8$io_out_get[511:504] :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_24$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd24 ||
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd24 &&
	     r_zIdx != 4'd15 ;

  // register r_ltX_25
  assign r_ltX_25$D_IN =
	     MUX_r_ltX_25$write_1__SEL_1 ?
	       m_intra8$io_out_get[511:504] :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_25$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd25 ||
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd25 &&
	     r_zIdx != 4'd15 ;

  // register r_ltX_26
  assign r_ltX_26$D_IN =
	     MUX_r_ltX_26$write_1__SEL_1 ?
	       m_intra8$io_out_get[511:504] :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_26$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd26 ||
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd26 &&
	     r_zIdx != 4'd15 ;

  // register r_ltX_27
  assign r_ltX_27$D_IN =
	     MUX_r_ltX_27$write_1__SEL_1 ?
	       m_intra8$io_out_get[511:504] :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_27$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd27 ||
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd27 &&
	     r_zIdx != 4'd15 ;

  // register r_ltX_28
  assign r_ltX_28$D_IN =
	     MUX_r_ltX_28$write_1__SEL_1 ?
	       m_intra8$io_out_get[511:504] :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_28$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd28 ||
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd28 &&
	     r_zIdx != 4'd15 ;

  // register r_ltX_29
  assign r_ltX_29$D_IN =
	     MUX_r_ltX_29$write_1__SEL_1 ?
	       m_intra8$io_out_get[511:504] :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_29$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd29 ||
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd29 &&
	     r_zIdx != 4'd15 ;

  // register r_ltX_3
  assign r_ltX_3$D_IN =
	     MUX_r_ltX_3$write_1__SEL_1 ?
	       m_intra8$io_out_get[511:504] :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_3$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd3 ||
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd3 &&
	     r_zIdx != 4'd15 ;

  // register r_ltX_30
  assign r_ltX_30$D_IN =
	     MUX_r_ltX_30$write_1__SEL_1 ?
	       m_intra8$io_out_get[511:504] :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_30$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd30 ||
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd30 &&
	     r_zIdx != 4'd15 ;

  // register r_ltX_31
  assign r_ltX_31$D_IN =
	     MUX_r_ltX_31$write_1__SEL_1 ?
	       MUX_r_ltX_31$write_1__VAL_1 :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_31$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd31 ||
	     MUX_r_cnt$write_1__SEL_1 && _dfoo1 ;

  // register r_ltX_4
  assign r_ltX_4$D_IN =
	     MUX_r_ltX_4$write_1__SEL_1 ?
	       m_intra8$io_out_get[511:504] :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_4$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd4 ||
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd4 &&
	     r_zIdx != 4'd15 ;

  // register r_ltX_5
  assign r_ltX_5$D_IN =
	     MUX_r_ltX_5$write_1__SEL_1 ?
	       m_intra8$io_out_get[511:504] :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_5$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd5 ||
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd5 &&
	     r_zIdx != 4'd15 ;

  // register r_ltX_6
  assign r_ltX_6$D_IN =
	     MUX_r_ltX_6$write_1__SEL_1 ?
	       m_intra8$io_out_get[511:504] :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_6$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd6 ||
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd6 &&
	     r_zIdx != 4'd15 ;

  // register r_ltX_7
  assign r_ltX_7$D_IN =
	     MUX_r_ltX_7$write_1__SEL_1 ?
	       MUX_r_ltX_7$write_1__VAL_1 :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_7$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd7 ||
	     MUX_r_cnt$write_1__SEL_1 && _dfoo7 ;

  // register r_ltX_8
  assign r_ltX_8$D_IN =
	     MUX_r_ltX_8$write_1__SEL_1 ?
	       m_intra8$io_out_get[511:504] :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_8$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd8 ||
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd8 &&
	     r_zIdx != 4'd15 ;

  // register r_ltX_9
  assign r_ltX_9$D_IN =
	     MUX_r_ltX_9$write_1__SEL_1 ?
	       m_intra8$io_out_get[511:504] :
	       rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_9$EN =
	     WILL_FIRE_RL_s00_refLT && x__h2910 == 5'd9 ||
	     MUX_r_cnt$write_1__SEL_1 && ltIdx__h68422 == 5'd9 &&
	     r_zIdx != 4'd15 ;

  // register r_recon
  assign r_recon$D_IN = 512'h0 ;
  assign r_recon$EN = 1'b0 ;

  // register r_refL
  assign r_refL$D_IN =
	     MUX_r_refL$write_1__SEL_1 ?
	       256'h8080808080808080808080808080808080808080808080808080808080808080 :
	       MUX_r_refL$write_1__VAL_2 ;
  assign r_refL$EN =
	     EN_start && start_isFirstInRow || MUX_r_cnt$write_1__SEL_1 ;

  // register r_ref_0
  assign r_ref_0$D_IN =
	     { IF_SEL_ARR_r_valid_read__5_BITS_4_TO_0_6_r_val_ETC___d266,
	       IF_SEL_ARR_r_valid_read__5_BITS_4_TO_0_6_r_val_ETC___d356 } ;
  assign r_ref_0$EN = r_cnt == 4'd5 ;

  // register r_ref_1
  assign r_ref_1$D_IN =
	     { r_ref_0_read__59_BITS_263_TO_256_09_CONCAT_0_C_ETC___d496,
	       x5799_PLUS_2__q30[9:2],
	       x5946_PLUS_2__q31[9:2],
	       x6093_PLUS_2__q32[9:2],
	       r_ref_0_read__59_BITS_135_TO_128_17_CONCAT_0_C_ETC___d623,
	       x9463_PLUS_2__q33[9:2] } ;
  assign r_ref_1$EN = r_cnt == 4'd6 ;

  // register r_tmpBuf
  assign r_tmpBuf$D_IN = 64'h0 ;
  assign r_tmpBuf$EN = 1'b0 ;

  // register r_topX
  assign r_topX$D_IN =
	     MUX_r_cnt$write_1__SEL_1 ?
	       MUX_r_topX$write_1__VAL_1 :
	       MUX_r_topX$write_1__VAL_2 ;
  assign r_topX$EN = w_refT$whas ;

  // register r_topX31
  assign r_topX31$D_IN = r_topX[255:248] ;
  assign r_topX31$EN = WILL_FIRE_RL_s00_refLT ;

  // register r_valid
  assign r_valid$D_IN =
	     { 27'd62713787,
	       fWires_x[524],
	       fWires_x[524],
	       8'b01111011,
	       fWires_x[524],
	       fWires_x[524],
	       fWires_x[524],
	       10'd478,
	       fWires_x[527:526],
	       fWires_x[526],
	       2'd2,
	       fWires_x[526],
	       fWires_x[526],
	       fWires_x[526],
	       9'd443,
	       fWires_x[524],
	       fWires_x[524],
	       fWires_x[524],
	       fWires_x[526],
	       fWires_x[526],
	       fWires_x[526],
	       2'd2,
	       fWires_x[526],
	       fWires_x[526:524],
	       fWires_x[524] } ;
  assign r_valid$EN = EN_start ;

  // register r_zIdx
  assign r_zIdx$D_IN =
	     MUX_r_cnt$write_1__SEL_1 ? MUX_r_zIdx$write_1__VAL_1 : 4'd0 ;
  assign r_zIdx$EN = MUX_r_cnt$write_1__SEL_1 || EN_start ;

  // submodule m_intra8
  assign m_intra8$fWires_x =
	     { r_ref_1,
	       r_ref_0,
	       fWires_x[511:0],
	       r_dcVal,
	       fWires_x[523:518] } ;
  assign m_intra8$EN_startPred = m_intra8$RDY_startPred && r_cnt == 4'd7 ;
  assign m_intra8$EN_io_out_get = MUX_r_cnt$write_1__SEL_1 ;

  // submodule rf_refT
  assign rf_refT$ADDR_1 = w_refT$wget[71:64] ;
  assign rf_refT$ADDR_2 = 8'h0 ;
  assign rf_refT$ADDR_3 = 8'h0 ;
  assign rf_refT$ADDR_4 = 8'h0 ;
  assign rf_refT$ADDR_5 = 8'h0 ;
  assign rf_refT$ADDR_IN = w_refT$wget[71:64] ;
  assign rf_refT$D_IN = w_refT$wget[63:0] ;
  assign rf_refT$WE = _upd_RL_do_ram$EN_rf_refT$whas ;

  // remaining internal signals
  assign IF_SEL_ARR_r_valid_read__5_BITS_4_TO_0_6_r_val_ETC___d314 =
	     (valid__h2681 == 5'b01110) ? {8{x1__h5286[63:56]}} : x2__h5287 ;
  assign IF_r_cnt_read_EQ_4_5_THEN_rf_refT_sub_IF_w_ref_ETC___d65 =
	     { (r_cnt == 4'd4) ? rf_refT$D_OUT_1 : r_topX[319:256],
	       (r_cnt == 4'd3) ? rf_refT$D_OUT_1 : r_topX[255:192],
	       (r_cnt == 4'd2) ? rf_refT$D_OUT_1 : r_topX[191:128] } ;
  assign _dfoo1 = r_zIdx == 4'd15 || ltIdx__h68422 == 5'd31 ;
  assign _dfoo3 = r_zIdx == 4'd15 || ltIdx__h68422 == 5'd23 ;
  assign _dfoo5 = r_zIdx == 4'd15 || ltIdx__h68422 == 5'd15 ;
  assign _dfoo7 = r_zIdx == 4'd15 || ltIdx__h68422 == 5'd7 ;
  assign ltIdx__h68422 = { rcuY__h2680, 1'b0, rcuX__h2679 } ;
  assign r_ref_0_read__59_BITS_135_TO_128_17_CONCAT_0_C_ETC___d572 =
	     { r_ref_0[135:128],
	       x7269_PLUS_2__q13[9:2],
	       x7466_PLUS_2__q14[9:2],
	       x7626_PLUS_2__q15[9:2],
	       x7786_PLUS_2__q16[9:2],
	       x7946_PLUS_2__q17[9:2],
	       x8106_PLUS_2__q18[9:2],
	       x8266_PLUS_2__q19[9:2] } ;
  assign r_ref_0_read__59_BITS_135_TO_128_17_CONCAT_0_C_ETC___d598 =
	     { r_ref_0_read__59_BITS_135_TO_128_17_CONCAT_0_C_ETC___d572,
	       x8405_PLUS_2__q20[9:2],
	       x8544_PLUS_2__q21[9:2],
	       x8683_PLUS_2__q22[9:2],
	       x8822_PLUS_2__q23[9:2] } ;
  assign r_ref_0_read__59_BITS_135_TO_128_17_CONCAT_0_C_ETC___d623 =
	     { r_ref_0_read__59_BITS_135_TO_128_17_CONCAT_0_C_ETC___d598,
	       x8961_PLUS_2__q24[9:2],
	       x9100_PLUS_2__q25[9:2],
	       x9239_PLUS_2__q26[9:2],
	       x9378_PLUS_2__q27[9:2] } ;
  assign r_ref_0_read__59_BITS_263_TO_256_09_CONCAT_0_C_ETC___d442 =
	     { r_ref_0[263:256],
	       x3872_PLUS_2__q1[9:2],
	       x4077_PLUS_2__q2[9:2],
	       x4245_PLUS_2__q3[9:2],
	       x4413_PLUS_2__q4[9:2] } ;
  assign r_ref_0_read__59_BITS_263_TO_256_09_CONCAT_0_C_ETC___d470 =
	     { r_ref_0_read__59_BITS_263_TO_256_09_CONCAT_0_C_ETC___d442,
	       x4581_PLUS_2__q5[9:2],
	       x4749_PLUS_2__q6[9:2],
	       x4917_PLUS_2__q7[9:2],
	       x5064_PLUS_2__q8[9:2] } ;
  assign r_ref_0_read__59_BITS_263_TO_256_09_CONCAT_0_C_ETC___d496 =
	     { r_ref_0_read__59_BITS_263_TO_256_09_CONCAT_0_C_ETC___d470,
	       x5211_PLUS_2__q9[9:2],
	       x5358_PLUS_2__q10[9:2],
	       x5505_PLUS_2__q11[9:2],
	       x5652_PLUS_2__q12[9:2] } ;
  assign rcuX__h2679 = { r_zIdx[2], r_zIdx[0] } ;
  assign rcuY__h2680 = { r_zIdx[3], r_zIdx[1] } ;
  assign refLx__h57948 =
	     { m_intra8$io_out_get[511:504],
	       m_intra8$io_out_get[447:440],
	       m_intra8$io_out_get[383:376],
	       m_intra8$io_out_get[319:312],
	       m_intra8$io_out_get[255:248],
	       m_intra8$io_out_get[191:184],
	       m_intra8$io_out_get[127:120],
	       m_intra8$io_out_get[63:56] } ;
  assign x3872_PLUS_2__q1 = x__h43872 + 10'd2 ;
  assign x4077_PLUS_2__q2 = x__h44077 + 10'd2 ;
  assign x4245_PLUS_2__q3 = x__h44245 + 10'd2 ;
  assign x4413_PLUS_2__q4 = x__h44413 + 10'd2 ;
  assign x4581_PLUS_2__q5 = x__h44581 + 10'd2 ;
  assign x4749_PLUS_2__q6 = x__h44749 + 10'd2 ;
  assign x4917_PLUS_2__q7 = x__h44917 + 10'd2 ;
  assign x5064_PLUS_2__q8 = x__h45064 + 10'd2 ;
  assign x5211_PLUS_2__q9 = x__h45211 + 10'd2 ;
  assign x5358_PLUS_2__q10 = x__h45358 + 10'd2 ;
  assign x5505_PLUS_2__q11 = x__h45505 + 10'd2 ;
  assign x5652_PLUS_2__q12 = x__h45652 + 10'd2 ;
  assign x5799_PLUS_2__q30 = x__h45799 + 10'd2 ;
  assign x5946_PLUS_2__q31 = x__h45946 + 10'd2 ;
  assign x6093_PLUS_2__q32 = x__h46093 + 10'd2 ;
  assign x7269_PLUS_2__q13 = x__h47269 + 10'd2 ;
  assign x7466_PLUS_2__q14 = x__h47466 + 10'd2 ;
  assign x7626_PLUS_2__q15 = x__h47626 + 10'd2 ;
  assign x7786_PLUS_2__q16 = x__h47786 + 10'd2 ;
  assign x7946_PLUS_2__q17 = x__h47946 + 10'd2 ;
  assign x8088_PLUS_y8089_PLUS_8__q29 = x__h38088 + y__h38089 + 12'd8 ;
  assign x8106_PLUS_2__q18 = x__h48106 + 10'd2 ;
  assign x8266_PLUS_2__q19 = x__h48266 + 10'd2 ;
  assign x8405_PLUS_2__q20 = x__h48405 + 10'd2 ;
  assign x8544_PLUS_2__q21 = x__h48544 + 10'd2 ;
  assign x8683_PLUS_2__q22 = x__h48683 + 10'd2 ;
  assign x8822_PLUS_2__q23 = x__h48822 + 10'd2 ;
  assign x8961_PLUS_2__q24 = x__h48961 + 10'd2 ;
  assign x9100_PLUS_2__q25 = x__h49100 + 10'd2 ;
  assign x9239_PLUS_2__q26 = x__h49239 + 10'd2 ;
  assign x9378_PLUS_2__q27 = x__h49378 + 10'd2 ;
  assign x9463_PLUS_2__q33 = x__h49463 + 10'd2 ;
  assign x__h24330 = { rcuY__h2680 - 2'd1, { 1'b0, rcuX__h2679 } - 3'd1 } ;
  assign x__h25752 = { 1'b0, rcuX__h2679 } + 3'd1 ;
  assign x__h2845 = { fWires_x[517:512], 2'b0 } + { 5'd0, r_cnt[2:0] } ;
  assign x__h2910 = { 2'b11, r_cnt[2:0] } ;
  assign x__h38088 = x__h38090 + y__h38091 ;
  assign x__h38090 = x__h38111 + y__h38112 ;
  assign x__h38111 = x__h38113 + y__h38114 ;
  assign x__h38113 = x__h38134 + y__h38135 ;
  assign x__h38134 = x__h38136 + y__h38137 ;
  assign x__h38136 = x__h38157 + y__h38158 ;
  assign x__h38157 = x__h38159 + y__h38160 ;
  assign x__h38159 = x__h38180 + y__h38181 ;
  assign x__h38180 = x__h38182 + y__h38183 ;
  assign x__h38182 = x__h38203 + y__h38204 ;
  assign x__h38203 = x__h38205 + y__h38206 ;
  assign x__h38205 = x__h38226 + y__h38227 ;
  assign x__h38226 = x__h38228 + y__h38229 ;
  assign x__h38228 = x__h38249 + y__h38250 ;
  assign x__h38249 = { 4'd0, r_ref_0[143:136] } ;
  assign x__h43872 = x__h43874 + y__h43875 ;
  assign x__h43874 = x__h43876 + y__h43877 ;
  assign x__h43876 = { 2'd0, r_ref_0[263:256] } ;
  assign x__h44077 = x__h44079 + y__h44080 ;
  assign x__h44079 = x__h44081 + y__h44082 ;
  assign x__h44081 = { 2'd0, r_ref_0[255:248] } ;
  assign x__h44245 = x__h44247 + y__h44248 ;
  assign x__h44247 = y__h43875 + y__h44250 ;
  assign x__h44413 = x__h44415 + y__h44416 ;
  assign x__h44415 = y__h44080 + y__h44418 ;
  assign x__h44581 = x__h44583 + y__h44584 ;
  assign x__h44583 = y__h44248 + y__h44586 ;
  assign x__h44749 = x__h44751 + y__h44752 ;
  assign x__h44751 = y__h44416 + y__h44754 ;
  assign x__h44917 = x__h44919 + y__h44920 ;
  assign x__h44919 = y__h44584 + y__h44922 ;
  assign x__h45064 = x__h45066 + y__h45067 ;
  assign x__h45066 = y__h44752 + y__h45069 ;
  assign x__h45211 = x__h45213 + y__h45214 ;
  assign x__h45213 = y__h44920 + y__h45216 ;
  assign x__h45358 = x__h45360 + y__h45361 ;
  assign x__h45360 = y__h45067 + y__h45363 ;
  assign x__h45505 = x__h45507 + y__h45508 ;
  assign x__h45507 = y__h45214 + y__h45510 ;
  assign x__h45652 = x__h45654 + y__h45655 ;
  assign x__h45654 = y__h45361 + y__h45657 ;
  assign x__h45799 = x__h45801 + y__h45802 ;
  assign x__h45801 = y__h45508 + y__h45804 ;
  assign x__h45946 = x__h45948 + y__h45949 ;
  assign x__h45948 = y__h45655 + y__h45951 ;
  assign x__h46093 = x__h46095 + y__h46096 ;
  assign x__h46095 = y__h45802 + y__h46098 ;
  assign x__h47269 = x__h47271 + y__h47272 ;
  assign x__h47271 = x__h47273 + y__h47274 ;
  assign x__h47273 = { 2'd0, r_ref_0[119:112] } ;
  assign x__h47466 = x__h47468 + y__h47469 ;
  assign x__h47468 = x__h47470 + y__h47471 ;
  assign x__h47470 = { 2'd0, r_ref_0[111:104] } ;
  assign x__h47626 = x__h47628 + x__h47273 ;
  assign x__h47628 = x__h47630 + y__h47631 ;
  assign x__h47630 = { 2'd0, r_ref_0[103:96] } ;
  assign x__h47786 = x__h47788 + x__h47470 ;
  assign x__h47788 = x__h47790 + y__h47791 ;
  assign x__h47790 = { 2'd0, r_ref_0[95:88] } ;
  assign x__h47946 = x__h47948 + x__h47630 ;
  assign x__h47948 = x__h47950 + y__h47951 ;
  assign x__h47950 = { 2'd0, r_ref_0[87:80] } ;
  assign x__h48106 = x__h48108 + x__h47790 ;
  assign x__h48108 = x__h48110 + y__h48111 ;
  assign x__h48110 = { 2'd0, r_ref_0[79:72] } ;
  assign x__h48266 = x__h48268 + x__h47950 ;
  assign x__h48268 = x__h48270 + y__h48271 ;
  assign x__h48270 = { 2'd0, r_ref_0[71:64] } ;
  assign x__h48405 = x__h48407 + x__h48110 ;
  assign x__h48407 = x__h48409 + y__h48410 ;
  assign x__h48409 = { 2'd0, r_ref_0[63:56] } ;
  assign x__h48544 = x__h48546 + x__h48270 ;
  assign x__h48546 = x__h48548 + y__h48549 ;
  assign x__h48548 = { 2'd0, r_ref_0[55:48] } ;
  assign x__h48683 = x__h48685 + x__h48409 ;
  assign x__h48685 = x__h48687 + y__h48688 ;
  assign x__h48687 = { 2'd0, r_ref_0[47:40] } ;
  assign x__h48822 = x__h48824 + x__h48548 ;
  assign x__h48824 = x__h48826 + y__h48827 ;
  assign x__h48826 = { 2'd0, r_ref_0[39:32] } ;
  assign x__h48961 = x__h48963 + x__h48687 ;
  assign x__h48963 = x__h48965 + y__h48966 ;
  assign x__h48965 = { 2'd0, r_ref_0[31:24] } ;
  assign x__h49100 = x__h49102 + x__h48826 ;
  assign x__h49102 = x__h49104 + y__h49105 ;
  assign x__h49104 = { 2'd0, r_ref_0[23:16] } ;
  assign x__h49239 = x__h49241 + x__h48965 ;
  assign x__h49241 = x__h49243 + y__h49244 ;
  assign x__h49243 = { 2'd0, r_ref_0[15:8] } ;
  assign x__h49378 = x__h49380 + x__h49104 ;
  assign x__h49380 = y__h46096 + y__h49383 ;
  assign x__h49463 = x__h49465 + x__h49243 ;
  assign x__h49465 = y__h45949 + y__h49468 ;
  assign x__h65659 = { fWires_x[517:512], rcuX__h2679 } ;
  assign y__h38089 = { 4'd0, r_ref_0[71:64] } ;
  assign y__h38091 = { 4'd0, r_ref_0[199:192] } ;
  assign y__h38112 = { 4'd0, r_ref_0[63:56] } ;
  assign y__h38114 = { 4'd0, r_ref_0[191:184] } ;
  assign y__h38135 = { 4'd0, r_ref_0[55:48] } ;
  assign y__h38137 = { 4'd0, r_ref_0[183:176] } ;
  assign y__h38158 = { 4'd0, r_ref_0[47:40] } ;
  assign y__h38160 = { 4'd0, r_ref_0[175:168] } ;
  assign y__h38181 = { 4'd0, r_ref_0[39:32] } ;
  assign y__h38183 = { 4'd0, r_ref_0[167:160] } ;
  assign y__h38204 = { 4'd0, r_ref_0[31:24] } ;
  assign y__h38206 = { 4'd0, r_ref_0[159:152] } ;
  assign y__h38227 = { 4'd0, r_ref_0[23:16] } ;
  assign y__h38229 = { 4'd0, r_ref_0[151:144] } ;
  assign y__h38250 = { 4'd0, r_ref_0[15:8] } ;
  assign y__h43875 = { 2'd0, r_ref_0[247:240] } ;
  assign y__h43877 = { 1'd0, r_ref_0[255:248], 1'd0 } ;
  assign y__h44080 = { 2'd0, r_ref_0[239:232] } ;
  assign y__h44082 = { 1'd0, r_ref_0[247:240], 1'd0 } ;
  assign y__h44248 = { 2'd0, r_ref_0[231:224] } ;
  assign y__h44250 = { 1'd0, r_ref_0[239:232], 1'd0 } ;
  assign y__h44416 = { 2'd0, r_ref_0[223:216] } ;
  assign y__h44418 = { 1'd0, r_ref_0[231:224], 1'd0 } ;
  assign y__h44584 = { 2'd0, r_ref_0[215:208] } ;
  assign y__h44586 = { 1'd0, r_ref_0[223:216], 1'd0 } ;
  assign y__h44752 = { 2'd0, r_ref_0[207:200] } ;
  assign y__h44754 = { 1'd0, r_ref_0[215:208], 1'd0 } ;
  assign y__h44920 = { 2'd0, r_ref_0[199:192] } ;
  assign y__h44922 = { 1'd0, r_ref_0[207:200], 1'd0 } ;
  assign y__h45067 = { 2'd0, r_ref_0[191:184] } ;
  assign y__h45069 = { 1'd0, r_ref_0[199:192], 1'd0 } ;
  assign y__h45214 = { 2'd0, r_ref_0[183:176] } ;
  assign y__h45216 = { 1'd0, r_ref_0[191:184], 1'd0 } ;
  assign y__h45361 = { 2'd0, r_ref_0[175:168] } ;
  assign y__h45363 = { 1'd0, r_ref_0[183:176], 1'd0 } ;
  assign y__h45508 = { 2'd0, r_ref_0[167:160] } ;
  assign y__h45510 = { 1'd0, r_ref_0[175:168], 1'd0 } ;
  assign y__h45655 = { 2'd0, r_ref_0[159:152] } ;
  assign y__h45657 = { 1'd0, r_ref_0[167:160], 1'd0 } ;
  assign y__h45802 = { 2'd0, r_ref_0[151:144] } ;
  assign y__h45804 = { 1'd0, r_ref_0[159:152], 1'd0 } ;
  assign y__h45949 = { 2'd0, r_ref_0[143:136] } ;
  assign y__h45951 = { 1'd0, r_ref_0[151:144], 1'd0 } ;
  assign y__h46096 = { 2'd0, r_ref_0[7:0] } ;
  assign y__h46098 = { 1'd0, r_ref_0[143:136], 1'd0 } ;
  assign y__h47272 = { 2'd0, r_ref_0[135:128] } ;
  assign y__h47274 = { 1'd0, r_ref_0[127:120], 1'd0 } ;
  assign y__h47469 = { 2'd0, r_ref_0[127:120] } ;
  assign y__h47471 = { 1'd0, r_ref_0[119:112], 1'd0 } ;
  assign y__h47631 = { 1'd0, r_ref_0[111:104], 1'd0 } ;
  assign y__h47791 = { 1'd0, r_ref_0[103:96], 1'd0 } ;
  assign y__h47951 = { 1'd0, r_ref_0[95:88], 1'd0 } ;
  assign y__h48111 = { 1'd0, r_ref_0[87:80], 1'd0 } ;
  assign y__h48271 = { 1'd0, r_ref_0[79:72], 1'd0 } ;
  assign y__h48410 = { 1'd0, r_ref_0[71:64], 1'd0 } ;
  assign y__h48549 = { 1'd0, r_ref_0[63:56], 1'd0 } ;
  assign y__h48688 = { 1'd0, r_ref_0[55:48], 1'd0 } ;
  assign y__h48827 = { 1'd0, r_ref_0[47:40], 1'd0 } ;
  assign y__h48966 = { 1'd0, r_ref_0[39:32], 1'd0 } ;
  assign y__h49105 = { 1'd0, r_ref_0[31:24], 1'd0 } ;
  assign y__h49244 = { 1'd0, r_ref_0[23:16], 1'd0 } ;
  assign y__h49383 = { 1'd0, r_ref_0[15:8], 1'd0 } ;
  assign y__h49468 = { 1'd0, r_ref_0[7:0], 1'd0 } ;
  always@(rcuX__h2679 or r_topX)
  begin
    case (rcuX__h2679)
      2'd0: x1__h5286 = r_topX[63:0];
      2'd1: x1__h5286 = r_topX[127:64];
      2'd2: x1__h5286 = r_topX[191:128];
      2'd3: x1__h5286 = r_topX[255:192];
    endcase
  end
  always@(r_zIdx or r_valid)
  begin
    case (r_zIdx)
      4'd0: valid__h2681 = r_valid[4:0];
      4'd1: valid__h2681 = r_valid[9:5];
      4'd2: valid__h2681 = r_valid[14:10];
      4'd3: valid__h2681 = r_valid[19:15];
      4'd4: valid__h2681 = r_valid[24:20];
      4'd5: valid__h2681 = r_valid[29:25];
      4'd6: valid__h2681 = r_valid[34:30];
      4'd7: valid__h2681 = r_valid[39:35];
      4'd8: valid__h2681 = r_valid[44:40];
      4'd9: valid__h2681 = r_valid[49:45];
      4'd10: valid__h2681 = r_valid[54:50];
      4'd11: valid__h2681 = r_valid[59:55];
      4'd12: valid__h2681 = r_valid[64:60];
      4'd13: valid__h2681 = r_valid[69:65];
      4'd14: valid__h2681 = r_valid[74:70];
      4'd15: valid__h2681 = r_valid[79:75];
    endcase
  end
  always@(x__h25752 or r_topX)
  begin
    case (x__h25752)
      3'd0: x2__h5287 = r_topX[63:0];
      3'd1: x2__h5287 = r_topX[127:64];
      3'd2: x2__h5287 = r_topX[191:128];
      3'd3: x2__h5287 = r_topX[255:192];
      3'd4: x2__h5287 = r_topX[319:256];
      default: x2__h5287 =
		   64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(rcuY__h2680 or r_refL)
  begin
    case (rcuY__h2680)
      2'd0:
	  IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187 =
	      { r_refL[7:0],
		r_refL[15:8],
		r_refL[23:16],
		r_refL[31:24],
		r_refL[39:32],
		r_refL[47:40],
		r_refL[55:48],
		r_refL[63:56],
		r_refL[71:64],
		r_refL[79:72],
		r_refL[87:80],
		r_refL[95:88],
		r_refL[103:96],
		r_refL[111:104],
		r_refL[119:112],
		r_refL[127:120] };
      2'd1:
	  IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187 =
	      { r_refL[71:64],
		r_refL[79:72],
		r_refL[87:80],
		r_refL[95:88],
		r_refL[103:96],
		r_refL[111:104],
		r_refL[119:112],
		r_refL[127:120],
		r_refL[135:128],
		r_refL[143:136],
		r_refL[151:144],
		r_refL[159:152],
		r_refL[167:160],
		r_refL[175:168],
		r_refL[183:176],
		r_refL[191:184] };
      2'd2:
	  IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187 =
	      { r_refL[135:128],
		r_refL[143:136],
		r_refL[151:144],
		r_refL[159:152],
		r_refL[167:160],
		r_refL[175:168],
		r_refL[183:176],
		r_refL[191:184],
		r_refL[199:192],
		r_refL[207:200],
		r_refL[215:208],
		r_refL[223:216],
		r_refL[231:224],
		r_refL[239:232],
		r_refL[247:240],
		r_refL[255:248] };
      2'd3:
	  IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187 =
	      { r_refL[199:192],
		r_refL[207:200],
		r_refL[215:208],
		r_refL[223:216],
		r_refL[231:224],
		r_refL[239:232],
		r_refL[247:240],
		r_refL[255:248],
		64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
    endcase
  end
  always@(rcuY__h2680 or r_refL)
  begin
    case (rcuY__h2680)
      2'd0:
	  IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d219 =
	      { r_refL[7:0],
		r_refL[15:8],
		r_refL[23:16],
		r_refL[31:24],
		r_refL[39:32],
		r_refL[47:40],
		r_refL[55:48],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56] };
      2'd1:
	  IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d219 =
	      { r_refL[71:64],
		r_refL[79:72],
		r_refL[87:80],
		r_refL[95:88],
		r_refL[103:96],
		r_refL[111:104],
		r_refL[119:112],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120] };
      2'd2:
	  IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d219 =
	      { r_refL[135:128],
		r_refL[143:136],
		r_refL[151:144],
		r_refL[159:152],
		r_refL[167:160],
		r_refL[175:168],
		r_refL[183:176],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184] };
      2'd3:
	  IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d219 =
	      { r_refL[199:192],
		r_refL[207:200],
		r_refL[215:208],
		r_refL[223:216],
		r_refL[231:224],
		r_refL[239:232],
		r_refL[247:240],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248] };
    endcase
  end
  always@(x__h24330 or
	  r_ltX_0 or
	  r_ltX_1 or
	  r_ltX_2 or
	  r_ltX_3 or
	  r_ltX_4 or
	  r_ltX_5 or
	  r_ltX_6 or
	  r_ltX_7 or
	  r_ltX_8 or
	  r_ltX_9 or
	  r_ltX_10 or
	  r_ltX_11 or
	  r_ltX_12 or
	  r_ltX_13 or
	  r_ltX_14 or
	  r_ltX_15 or
	  r_ltX_16 or
	  r_ltX_17 or
	  r_ltX_18 or
	  r_ltX_19 or
	  r_ltX_20 or
	  r_ltX_21 or
	  r_ltX_22 or
	  r_ltX_23 or
	  r_ltX_24 or
	  r_ltX_25 or
	  r_ltX_26 or
	  r_ltX_27 or r_ltX_28 or r_ltX_29 or r_ltX_30 or r_ltX_31)
  begin
    case (x__h24330)
      5'd0:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 = r_ltX_0;
      5'd1:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 = r_ltX_1;
      5'd2:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 = r_ltX_2;
      5'd3:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 = r_ltX_3;
      5'd4:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 = r_ltX_4;
      5'd5:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 = r_ltX_5;
      5'd6:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 = r_ltX_6;
      5'd7:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 = r_ltX_7;
      5'd8:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 = r_ltX_8;
      5'd9:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 = r_ltX_9;
      5'd10:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 =
	      r_ltX_10;
      5'd11:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 =
	      r_ltX_11;
      5'd12:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 =
	      r_ltX_12;
      5'd13:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 =
	      r_ltX_13;
      5'd14:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 =
	      r_ltX_14;
      5'd15:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 =
	      r_ltX_15;
      5'd16:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 =
	      r_ltX_16;
      5'd17:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 =
	      r_ltX_17;
      5'd18:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 =
	      r_ltX_18;
      5'd19:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 =
	      r_ltX_19;
      5'd20:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 =
	      r_ltX_20;
      5'd21:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 =
	      r_ltX_21;
      5'd22:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 =
	      r_ltX_22;
      5'd23:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 =
	      r_ltX_23;
      5'd24:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 =
	      r_ltX_24;
      5'd25:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 =
	      r_ltX_25;
      5'd26:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 =
	      r_ltX_26;
      5'd27:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 =
	      r_ltX_27;
      5'd28:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 =
	      r_ltX_28;
      5'd29:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 =
	      r_ltX_29;
      5'd30:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 =
	      r_ltX_30;
      5'd31:
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 =
	      r_ltX_31;
    endcase
  end
  always@(rcuY__h2680 or r_refL)
  begin
    case (rcuY__h2680)
      2'd0:
	  IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d135 =
	      { r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:0] };
      2'd1:
	  IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d135 =
	      { r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:64] };
      2'd2:
	  IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d135 =
	      { r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:128] };
      2'd3:
	  IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d135 =
	      { r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:192] };
    endcase
  end
  always@(valid__h2681 or
	  IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187 or
	  IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d135 or
	  IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d219 or
	  x1__h5286)
  begin
    case (valid__h2681)
      5'b0, 5'b00010:
	  IF_SEL_ARR_r_valid_read__5_BITS_4_TO_0_6_r_val_ETC___d266 =
	      IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d135;
      5'b00011:
	  IF_SEL_ARR_r_valid_read__5_BITS_4_TO_0_6_r_val_ETC___d266 =
	      { IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[7:0],
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[15:8],
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[23:16],
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[31:24],
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[39:32],
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[47:40],
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[55:48],
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[63:56],
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[71:64],
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[79:72],
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[87:80],
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[95:88],
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[103:96],
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[111:104],
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[119:112],
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[127:120] };
      5'b01110, 5'b11110:
	  IF_SEL_ARR_r_valid_read__5_BITS_4_TO_0_6_r_val_ETC___d266 =
	      { IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d219[7:0],
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d219[15:8],
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d219[23:16],
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d219[31:24],
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d219[39:32],
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d219[47:40],
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d219[55:48],
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d219[63:56],
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d219[71:64],
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d219[79:72],
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d219[87:80],
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d219[95:88],
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d219[103:96],
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d219[111:104],
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d219[119:112],
		IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d219[127:120] };
      5'b11000:
	  IF_SEL_ARR_r_valid_read__5_BITS_4_TO_0_6_r_val_ETC___d266 =
	      {16{x1__h5286[7:0]}};
      default: IF_SEL_ARR_r_valid_read__5_BITS_4_TO_0_6_r_val_ETC___d266 =
		   { IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[7:0],
		     IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[15:8],
		     IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[23:16],
		     IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[31:24],
		     IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[39:32],
		     IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[47:40],
		     IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[55:48],
		     IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[63:56],
		     IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[71:64],
		     IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[79:72],
		     IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[87:80],
		     IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[95:88],
		     IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[103:96],
		     IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[111:104],
		     IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[119:112],
		     IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d187[127:120] };
    endcase
  end
  always@(rcuY__h2680 or r_refL)
  begin
    case (rcuY__h2680)
      2'd0:
	  IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d302 =
	      {17{r_refL[7:0]}};
      2'd1:
	  IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d302 =
	      {17{r_refL[71:64]}};
      2'd2:
	  IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d302 =
	      {17{r_refL[135:128]}};
      2'd3:
	  IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d302 =
	      {17{r_refL[199:192]}};
    endcase
  end
  always@(valid__h2681 or
	  SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351 or
	  x1__h5286)
  begin
    case (valid__h2681)
      5'b01110:
	  CASE_valid681_0b1110_SEL_ARR_r_ltX_0_read__15__ETC__q28 =
	      SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351;
      5'b11000:
	  CASE_valid681_0b1110_SEL_ARR_r_ltX_0_read__15__ETC__q28 =
	      x1__h5286[7:0];
      default: CASE_valid681_0b1110_SEL_ARR_r_ltX_0_read__15__ETC__q28 =
		   SEL_ARR_r_ltX_0_read__15_r_ltX_1_read__16_r_lt_ETC___d351;
    endcase
  end
  always@(valid__h2681 or
	  IF_SEL_ARR_r_valid_read__5_BITS_4_TO_0_6_r_val_ETC___d314 or
	  x1__h5286 or
	  CASE_valid681_0b1110_SEL_ARR_r_ltX_0_read__15__ETC__q28 or
	  IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d302)
  begin
    case (valid__h2681)
      5'b0, 5'b00010, 5'b00011:
	  IF_SEL_ARR_r_valid_read__5_BITS_4_TO_0_6_r_val_ETC___d356 =
	      IF_r_zIdx_read__3_BIT_3_8_CONCAT_r_zIdx_read___ETC___d302;
      default: IF_SEL_ARR_r_valid_read__5_BITS_4_TO_0_6_r_val_ETC___d356 =
		   { IF_SEL_ARR_r_valid_read__5_BITS_4_TO_0_6_r_val_ETC___d314,
		     x1__h5286,
		     CASE_valid681_0b1110_SEL_ARR_r_ltX_0_read__15__ETC__q28 };
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        fifo_out_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      532'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	r_cnt <= `BSV_ASSIGNMENT_DELAY 4'd15;
	r_zIdx <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (fifo_out_rv$EN)
	  fifo_out_rv <= `BSV_ASSIGNMENT_DELAY fifo_out_rv$D_IN;
	if (r_cnt$EN) r_cnt <= `BSV_ASSIGNMENT_DELAY r_cnt$D_IN;
	if (r_zIdx$EN) r_zIdx <= `BSV_ASSIGNMENT_DELAY r_zIdx$D_IN;
      end
    if (r_dcVal$EN) r_dcVal <= `BSV_ASSIGNMENT_DELAY r_dcVal$D_IN;
    if (r_ltX_0$EN) r_ltX_0 <= `BSV_ASSIGNMENT_DELAY r_ltX_0$D_IN;
    if (r_ltX_1$EN) r_ltX_1 <= `BSV_ASSIGNMENT_DELAY r_ltX_1$D_IN;
    if (r_ltX_10$EN) r_ltX_10 <= `BSV_ASSIGNMENT_DELAY r_ltX_10$D_IN;
    if (r_ltX_11$EN) r_ltX_11 <= `BSV_ASSIGNMENT_DELAY r_ltX_11$D_IN;
    if (r_ltX_12$EN) r_ltX_12 <= `BSV_ASSIGNMENT_DELAY r_ltX_12$D_IN;
    if (r_ltX_13$EN) r_ltX_13 <= `BSV_ASSIGNMENT_DELAY r_ltX_13$D_IN;
    if (r_ltX_14$EN) r_ltX_14 <= `BSV_ASSIGNMENT_DELAY r_ltX_14$D_IN;
    if (r_ltX_15$EN) r_ltX_15 <= `BSV_ASSIGNMENT_DELAY r_ltX_15$D_IN;
    if (r_ltX_16$EN) r_ltX_16 <= `BSV_ASSIGNMENT_DELAY r_ltX_16$D_IN;
    if (r_ltX_17$EN) r_ltX_17 <= `BSV_ASSIGNMENT_DELAY r_ltX_17$D_IN;
    if (r_ltX_18$EN) r_ltX_18 <= `BSV_ASSIGNMENT_DELAY r_ltX_18$D_IN;
    if (r_ltX_19$EN) r_ltX_19 <= `BSV_ASSIGNMENT_DELAY r_ltX_19$D_IN;
    if (r_ltX_2$EN) r_ltX_2 <= `BSV_ASSIGNMENT_DELAY r_ltX_2$D_IN;
    if (r_ltX_20$EN) r_ltX_20 <= `BSV_ASSIGNMENT_DELAY r_ltX_20$D_IN;
    if (r_ltX_21$EN) r_ltX_21 <= `BSV_ASSIGNMENT_DELAY r_ltX_21$D_IN;
    if (r_ltX_22$EN) r_ltX_22 <= `BSV_ASSIGNMENT_DELAY r_ltX_22$D_IN;
    if (r_ltX_23$EN) r_ltX_23 <= `BSV_ASSIGNMENT_DELAY r_ltX_23$D_IN;
    if (r_ltX_24$EN) r_ltX_24 <= `BSV_ASSIGNMENT_DELAY r_ltX_24$D_IN;
    if (r_ltX_25$EN) r_ltX_25 <= `BSV_ASSIGNMENT_DELAY r_ltX_25$D_IN;
    if (r_ltX_26$EN) r_ltX_26 <= `BSV_ASSIGNMENT_DELAY r_ltX_26$D_IN;
    if (r_ltX_27$EN) r_ltX_27 <= `BSV_ASSIGNMENT_DELAY r_ltX_27$D_IN;
    if (r_ltX_28$EN) r_ltX_28 <= `BSV_ASSIGNMENT_DELAY r_ltX_28$D_IN;
    if (r_ltX_29$EN) r_ltX_29 <= `BSV_ASSIGNMENT_DELAY r_ltX_29$D_IN;
    if (r_ltX_3$EN) r_ltX_3 <= `BSV_ASSIGNMENT_DELAY r_ltX_3$D_IN;
    if (r_ltX_30$EN) r_ltX_30 <= `BSV_ASSIGNMENT_DELAY r_ltX_30$D_IN;
    if (r_ltX_31$EN) r_ltX_31 <= `BSV_ASSIGNMENT_DELAY r_ltX_31$D_IN;
    if (r_ltX_4$EN) r_ltX_4 <= `BSV_ASSIGNMENT_DELAY r_ltX_4$D_IN;
    if (r_ltX_5$EN) r_ltX_5 <= `BSV_ASSIGNMENT_DELAY r_ltX_5$D_IN;
    if (r_ltX_6$EN) r_ltX_6 <= `BSV_ASSIGNMENT_DELAY r_ltX_6$D_IN;
    if (r_ltX_7$EN) r_ltX_7 <= `BSV_ASSIGNMENT_DELAY r_ltX_7$D_IN;
    if (r_ltX_8$EN) r_ltX_8 <= `BSV_ASSIGNMENT_DELAY r_ltX_8$D_IN;
    if (r_ltX_9$EN) r_ltX_9 <= `BSV_ASSIGNMENT_DELAY r_ltX_9$D_IN;
    if (r_recon$EN) r_recon <= `BSV_ASSIGNMENT_DELAY r_recon$D_IN;
    if (r_refL$EN) r_refL <= `BSV_ASSIGNMENT_DELAY r_refL$D_IN;
    if (r_ref_0$EN) r_ref_0 <= `BSV_ASSIGNMENT_DELAY r_ref_0$D_IN;
    if (r_ref_1$EN) r_ref_1 <= `BSV_ASSIGNMENT_DELAY r_ref_1$D_IN;
    if (r_tmpBuf$EN) r_tmpBuf <= `BSV_ASSIGNMENT_DELAY r_tmpBuf$D_IN;
    if (r_topX$EN) r_topX <= `BSV_ASSIGNMENT_DELAY r_topX$D_IN;
    if (r_topX31$EN) r_topX31 <= `BSV_ASSIGNMENT_DELAY r_topX31$D_IN;
    if (r_valid$EN) r_valid <= `BSV_ASSIGNMENT_DELAY r_valid$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    fifo_out_rv =
	533'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    r_cnt = 4'hA;
    r_dcVal = 8'hAA;
    r_ltX_0 = 8'hAA;
    r_ltX_1 = 8'hAA;
    r_ltX_10 = 8'hAA;
    r_ltX_11 = 8'hAA;
    r_ltX_12 = 8'hAA;
    r_ltX_13 = 8'hAA;
    r_ltX_14 = 8'hAA;
    r_ltX_15 = 8'hAA;
    r_ltX_16 = 8'hAA;
    r_ltX_17 = 8'hAA;
    r_ltX_18 = 8'hAA;
    r_ltX_19 = 8'hAA;
    r_ltX_2 = 8'hAA;
    r_ltX_20 = 8'hAA;
    r_ltX_21 = 8'hAA;
    r_ltX_22 = 8'hAA;
    r_ltX_23 = 8'hAA;
    r_ltX_24 = 8'hAA;
    r_ltX_25 = 8'hAA;
    r_ltX_26 = 8'hAA;
    r_ltX_27 = 8'hAA;
    r_ltX_28 = 8'hAA;
    r_ltX_29 = 8'hAA;
    r_ltX_3 = 8'hAA;
    r_ltX_30 = 8'hAA;
    r_ltX_31 = 8'hAA;
    r_ltX_4 = 8'hAA;
    r_ltX_5 = 8'hAA;
    r_ltX_6 = 8'hAA;
    r_ltX_7 = 8'hAA;
    r_ltX_8 = 8'hAA;
    r_ltX_9 = 8'hAA;
    r_recon =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    r_refL =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    r_ref_0 =
	264'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    r_ref_1 =
	264'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    r_tmpBuf = 64'hAAAAAAAAAAAAAAAA;
    r_topX =
	320'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    r_topX31 = 8'hAA;
    r_valid = 80'hAAAAAAAAAAAAAAAAAAAA;
    r_zIdx = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
  end
  // synopsys translate_on
endmodule  // mkIntraPredCtu

