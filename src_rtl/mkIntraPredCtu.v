//
// Generated by Bluespec Compiler, version 2021.06.chen (build f2da894e, 2021-06-19)
//
// On Sun Jul 11 02:33:14 CST 2021
//
//
// Ports:
// Name                         I/O  size props
// RDY_start                      O     1
// io_out_get                     O  1035
// RDY_io_out_get                 O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// fWires_x                       I   528
// EN_start                       I     1
// EN_io_out_get                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkIntraPredCtu(CLK,
		      RST_N,

		      fWires_x,

		      EN_start,
		      RDY_start,

		      EN_io_out_get,
		      io_out_get,
		      RDY_io_out_get);
  input  CLK;
  input  RST_N;

  // action method fWires
  input  [527 : 0] fWires_x;

  // action method start
  input  EN_start;
  output RDY_start;

  // actionvalue method io_out_get
  input  EN_io_out_get;
  output [1034 : 0] io_out_get;
  output RDY_io_out_get;

  // signals for module outputs
  wire [1034 : 0] io_out_get;
  wire RDY_io_out_get, RDY_start;

  // inlined wires
  wire [1035 : 0] fifo_out_rv$port0__write_1,
		  fifo_out_rv$port1__read,
		  fifo_out_rv$port1__write_1,
		  fifo_out_rv$port2__read;
  wire [72 : 0] w_refT$wget;
  wire _sub_RL_s00_refLT$EN_rf_refT$wget,
       _upd_RL_do_ram$EN_rf_refT$whas,
       _wget_RL_s00_refLT$EN_w_refT$wget,
       w_refT$whas;

  // register fifo_out_rv
  reg [1035 : 0] fifo_out_rv;
  wire [1035 : 0] fifo_out_rv$D_IN;
  wire fifo_out_rv$EN;

  // register r_cnt
  reg [3 : 0] r_cnt;
  reg [3 : 0] r_cnt$D_IN;
  wire r_cnt$EN;

  // register r_dcVal
  reg [7 : 0] r_dcVal;
  wire [7 : 0] r_dcVal$D_IN;
  wire r_dcVal$EN;

  // register r_ltX_0
  reg [7 : 0] r_ltX_0;
  wire [7 : 0] r_ltX_0$D_IN;
  wire r_ltX_0$EN;

  // register r_ltX_1
  reg [7 : 0] r_ltX_1;
  wire [7 : 0] r_ltX_1$D_IN;
  wire r_ltX_1$EN;

  // register r_ltX_10
  reg [7 : 0] r_ltX_10;
  wire [7 : 0] r_ltX_10$D_IN;
  wire r_ltX_10$EN;

  // register r_ltX_11
  reg [7 : 0] r_ltX_11;
  wire [7 : 0] r_ltX_11$D_IN;
  wire r_ltX_11$EN;

  // register r_ltX_12
  reg [7 : 0] r_ltX_12;
  wire [7 : 0] r_ltX_12$D_IN;
  wire r_ltX_12$EN;

  // register r_ltX_13
  reg [7 : 0] r_ltX_13;
  wire [7 : 0] r_ltX_13$D_IN;
  wire r_ltX_13$EN;

  // register r_ltX_14
  reg [7 : 0] r_ltX_14;
  wire [7 : 0] r_ltX_14$D_IN;
  wire r_ltX_14$EN;

  // register r_ltX_15
  reg [7 : 0] r_ltX_15;
  wire [7 : 0] r_ltX_15$D_IN;
  wire r_ltX_15$EN;

  // register r_ltX_2
  reg [7 : 0] r_ltX_2;
  wire [7 : 0] r_ltX_2$D_IN;
  wire r_ltX_2$EN;

  // register r_ltX_3
  reg [7 : 0] r_ltX_3;
  wire [7 : 0] r_ltX_3$D_IN;
  wire r_ltX_3$EN;

  // register r_ltX_4
  reg [7 : 0] r_ltX_4;
  wire [7 : 0] r_ltX_4$D_IN;
  wire r_ltX_4$EN;

  // register r_ltX_5
  reg [7 : 0] r_ltX_5;
  wire [7 : 0] r_ltX_5$D_IN;
  wire r_ltX_5$EN;

  // register r_ltX_6
  reg [7 : 0] r_ltX_6;
  wire [7 : 0] r_ltX_6$D_IN;
  wire r_ltX_6$EN;

  // register r_ltX_7
  reg [7 : 0] r_ltX_7;
  wire [7 : 0] r_ltX_7$D_IN;
  wire r_ltX_7$EN;

  // register r_ltX_8
  reg [7 : 0] r_ltX_8;
  wire [7 : 0] r_ltX_8$D_IN;
  wire r_ltX_8$EN;

  // register r_ltX_9
  reg [7 : 0] r_ltX_9;
  wire [7 : 0] r_ltX_9$D_IN;
  wire r_ltX_9$EN;

  // register r_recon
  reg [511 : 0] r_recon;
  wire [511 : 0] r_recon$D_IN;
  wire r_recon$EN;

  // register r_refL
  reg [255 : 0] r_refL;
  reg [255 : 0] r_refL$D_IN;
  wire r_refL$EN;

  // register r_ref_0
  reg [263 : 0] r_ref_0;
  wire [263 : 0] r_ref_0$D_IN;
  wire r_ref_0$EN;

  // register r_ref_1
  reg [263 : 0] r_ref_1;
  wire [263 : 0] r_ref_1$D_IN;
  wire r_ref_1$EN;

  // register r_tmpBuf
  reg [63 : 0] r_tmpBuf;
  wire [63 : 0] r_tmpBuf$D_IN;
  wire r_tmpBuf$EN;

  // register r_topX
  reg [319 : 0] r_topX;
  wire [319 : 0] r_topX$D_IN;
  wire r_topX$EN;

  // register r_topX31
  reg [7 : 0] r_topX31;
  wire [7 : 0] r_topX31$D_IN;
  wire r_topX31$EN;

  // register r_valid
  reg [79 : 0] r_valid;
  wire [79 : 0] r_valid$D_IN;
  wire r_valid$EN;

  // register r_zIdx
  reg [3 : 0] r_zIdx;
  wire [3 : 0] r_zIdx$D_IN;
  wire r_zIdx$EN;

  // ports of submodule m_intra8
  wire [1541 : 0] m_intra8$io_out_get;
  wire [1053 : 0] m_intra8$fWires_x;
  wire m_intra8$EN_io_out_get,
       m_intra8$EN_startPred,
       m_intra8$RDY_io_out_get,
       m_intra8$RDY_startPred;

  // ports of submodule rf_refT
  wire [63 : 0] rf_refT$D_IN, rf_refT$D_OUT_1;
  wire [7 : 0] rf_refT$ADDR_1,
	       rf_refT$ADDR_2,
	       rf_refT$ADDR_3,
	       rf_refT$ADDR_4,
	       rf_refT$ADDR_5,
	       rf_refT$ADDR_IN;
  wire rf_refT$WE;

  // rule scheduling signals
  wire WILL_FIRE_RL_s00_refLT;

  // inputs to muxes for submodule ports
  wire [319 : 0] MUX_r_topX$write_1__VAL_1, MUX_r_topX$write_1__VAL_2;
  wire [72 : 0] MUX_w_refT$wset_1__VAL_1, MUX_w_refT$wset_1__VAL_2;
  wire [3 : 0] MUX_r_cnt$write_1__VAL_1,
	       MUX_r_cnt$write_1__VAL_2,
	       MUX_r_zIdx$write_1__VAL_1;
  wire MUX_r_cnt$write_1__SEL_1, MUX_r_cnt$write_1__SEL_2;

  // remaining internal signals
  reg [135 : 0] IF_SEL_ARR_r_valid_read__5_BITS_4_TO_0_6_r_val_ETC___d338,
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d271;
  reg [127 : 0] CASE_rcuY832_0_r_refL_BITS_63_TO_56_CONCAT_r_r_ETC__q24,
		IF_SEL_ARR_r_valid_read__5_BITS_4_TO_0_6_r_val_ETC___d235,
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156,
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d188;
  reg [63 : 0] x1__h3490, x2__h3491;
  reg [7 : 0] CASE_valid833_0b1110_IF_r_zIdx_read__3_BIT_3_7_ETC__q29,
	      IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d333;
  reg [4 : 0] valid__h1833;
  wire [191 : 0] IF_r_cnt_read_EQ_4_6_THEN_rf_refT_sub_IF_w_ref_ETC___d36;
  wire [127 : 0] r_ref_0_read__42_BITS_135_TO_128_00_CONCAT_0_C_ETC___d606;
  wire [103 : 0] r_ref_0_read__42_BITS_263_TO_256_92_CONCAT_0_C_ETC___d479;
  wire [95 : 0] r_ref_0_read__42_BITS_135_TO_128_00_CONCAT_0_C_ETC___d581;
  wire [71 : 0] r_ref_0_read__42_BITS_263_TO_256_92_CONCAT_0_C_ETC___d453;
  wire [63 : 0] IF_SEL_ARR_r_valid_read__5_BITS_4_TO_0_6_r_val_ETC___d283,
		r_ref_0_read__42_BITS_135_TO_128_00_CONCAT_0_C_ETC___d555,
		refLx__h57068;
  wire [39 : 0] r_ref_0_read__42_BITS_263_TO_256_92_CONCAT_0_C_ETC___d425;
  wire [11 : 0] x7204_PLUS_y7205_PLUS_8__q30,
		x__h37204,
		x__h37206,
		x__h37227,
		x__h37229,
		x__h37250,
		x__h37252,
		x__h37273,
		x__h37275,
		x__h37296,
		x__h37298,
		x__h37319,
		x__h37321,
		x__h37342,
		x__h37344,
		x__h37365,
		y__h37205,
		y__h37207,
		y__h37228,
		y__h37230,
		y__h37251,
		y__h37253,
		y__h37274,
		y__h37276,
		y__h37297,
		y__h37299,
		y__h37320,
		y__h37322,
		y__h37343,
		y__h37345,
		y__h37366;
  wire [9 : 0] x2988_PLUS_2__q1,
	       x3193_PLUS_2__q2,
	       x3361_PLUS_2__q3,
	       x3529_PLUS_2__q4,
	       x3697_PLUS_2__q5,
	       x3865_PLUS_2__q6,
	       x4033_PLUS_2__q7,
	       x4180_PLUS_2__q8,
	       x4327_PLUS_2__q9,
	       x4474_PLUS_2__q10,
	       x4621_PLUS_2__q11,
	       x4768_PLUS_2__q12,
	       x4915_PLUS_2__q31,
	       x5062_PLUS_2__q32,
	       x5209_PLUS_2__q33,
	       x6385_PLUS_2__q13,
	       x6582_PLUS_2__q14,
	       x6742_PLUS_2__q15,
	       x6902_PLUS_2__q16,
	       x7062_PLUS_2__q17,
	       x7222_PLUS_2__q18,
	       x7382_PLUS_2__q19,
	       x7521_PLUS_2__q20,
	       x7660_PLUS_2__q21,
	       x7799_PLUS_2__q22,
	       x7938_PLUS_2__q23,
	       x8077_PLUS_2__q25,
	       x8216_PLUS_2__q26,
	       x8355_PLUS_2__q27,
	       x8494_PLUS_2__q28,
	       x8579_PLUS_2__q34,
	       x__h42988,
	       x__h42990,
	       x__h42992,
	       x__h43193,
	       x__h43195,
	       x__h43197,
	       x__h43361,
	       x__h43363,
	       x__h43529,
	       x__h43531,
	       x__h43697,
	       x__h43699,
	       x__h43865,
	       x__h43867,
	       x__h44033,
	       x__h44035,
	       x__h44180,
	       x__h44182,
	       x__h44327,
	       x__h44329,
	       x__h44474,
	       x__h44476,
	       x__h44621,
	       x__h44623,
	       x__h44768,
	       x__h44770,
	       x__h44915,
	       x__h44917,
	       x__h45062,
	       x__h45064,
	       x__h45209,
	       x__h45211,
	       x__h46385,
	       x__h46387,
	       x__h46389,
	       x__h46582,
	       x__h46584,
	       x__h46586,
	       x__h46742,
	       x__h46744,
	       x__h46746,
	       x__h46902,
	       x__h46904,
	       x__h46906,
	       x__h47062,
	       x__h47064,
	       x__h47066,
	       x__h47222,
	       x__h47224,
	       x__h47226,
	       x__h47382,
	       x__h47384,
	       x__h47386,
	       x__h47521,
	       x__h47523,
	       x__h47525,
	       x__h47660,
	       x__h47662,
	       x__h47664,
	       x__h47799,
	       x__h47801,
	       x__h47803,
	       x__h47938,
	       x__h47940,
	       x__h47942,
	       x__h48077,
	       x__h48079,
	       x__h48081,
	       x__h48216,
	       x__h48218,
	       x__h48220,
	       x__h48355,
	       x__h48357,
	       x__h48359,
	       x__h48494,
	       x__h48496,
	       x__h48579,
	       x__h48581,
	       y__h42991,
	       y__h42993,
	       y__h43196,
	       y__h43198,
	       y__h43364,
	       y__h43366,
	       y__h43532,
	       y__h43534,
	       y__h43700,
	       y__h43702,
	       y__h43868,
	       y__h43870,
	       y__h44036,
	       y__h44038,
	       y__h44183,
	       y__h44185,
	       y__h44330,
	       y__h44332,
	       y__h44477,
	       y__h44479,
	       y__h44624,
	       y__h44626,
	       y__h44771,
	       y__h44773,
	       y__h44918,
	       y__h44920,
	       y__h45065,
	       y__h45067,
	       y__h45212,
	       y__h45214,
	       y__h46388,
	       y__h46390,
	       y__h46585,
	       y__h46587,
	       y__h46747,
	       y__h46907,
	       y__h47067,
	       y__h47227,
	       y__h47387,
	       y__h47526,
	       y__h47665,
	       y__h47804,
	       y__h47943,
	       y__h48082,
	       y__h48221,
	       y__h48360,
	       y__h48499,
	       y__h48584;
  wire [7 : 0] x__h1997, x__h66308;
  wire [3 : 0] rIdx__h1830;
  wire [2 : 0] x__h24836;
  wire [1 : 0] rcuX__h1831, rcuY__h1832;

  // action method start
  assign RDY_start = r_cnt == 4'd15 ;

  // actionvalue method io_out_get
  assign io_out_get = fifo_out_rv[1034:0] ;
  assign RDY_io_out_get = fifo_out_rv[1035] ;

  // submodule m_intra8
  mkIntraPred8 m_intra8(.CLK(CLK),
			.RST_N(RST_N),
			.fWires_x(m_intra8$fWires_x),
			.EN_startPred(m_intra8$EN_startPred),
			.EN_io_out_get(m_intra8$EN_io_out_get),
			.RDY_startPred(m_intra8$RDY_startPred),
			.io_out_get(m_intra8$io_out_get),
			.RDY_io_out_get(m_intra8$RDY_io_out_get));

  // submodule rf_refT
  RegFile #(.addr_width(32'd8),
	    .data_width(32'd64),
	    .lo(8'd0),
	    .hi(8'd255)) rf_refT(.CLK(CLK),
				 .ADDR_1(rf_refT$ADDR_1),
				 .ADDR_2(rf_refT$ADDR_2),
				 .ADDR_3(rf_refT$ADDR_3),
				 .ADDR_4(rf_refT$ADDR_4),
				 .ADDR_5(rf_refT$ADDR_5),
				 .ADDR_IN(rf_refT$ADDR_IN),
				 .D_IN(rf_refT$D_IN),
				 .WE(rf_refT$WE),
				 .D_OUT_1(rf_refT$D_OUT_1),
				 .D_OUT_2(),
				 .D_OUT_3(),
				 .D_OUT_4(),
				 .D_OUT_5());

  // rule RL_s00_refLT
  assign WILL_FIRE_RL_s00_refLT = r_cnt <= 4'd4 ;

  // inputs to muxes for submodule ports
  assign MUX_r_cnt$write_1__SEL_1 =
	     m_intra8$RDY_io_out_get && !fifo_out_rv$port1__read[1035] &&
	     r_cnt != 4'd15 ;
  assign MUX_r_cnt$write_1__SEL_2 = r_cnt <= 4'd7 ;
  assign MUX_r_cnt$write_1__VAL_1 = (r_zIdx == 4'd15) ? r_zIdx : 4'd5 ;
  assign MUX_r_cnt$write_1__VAL_2 = r_cnt + 4'd1 ;
  assign MUX_r_topX$write_1__VAL_1 =
	     { r_topX[319:256],
	       (rcuX__h1831 == 2'd3) ?
		 m_intra8$io_out_get[511:448] :
		 r_topX[255:192],
	       (rcuX__h1831 == 2'd2) ?
		 m_intra8$io_out_get[511:448] :
		 r_topX[191:128],
	       (rcuX__h1831 == 2'd1) ?
		 m_intra8$io_out_get[511:448] :
		 r_topX[127:64],
	       (rcuX__h1831 == 2'd0) ?
		 m_intra8$io_out_get[511:448] :
		 r_topX[63:0] } ;
  assign MUX_r_topX$write_1__VAL_2 =
	     { IF_r_cnt_read_EQ_4_6_THEN_rf_refT_sub_IF_w_ref_ETC___d36,
	       (r_cnt == 4'd1) ? rf_refT$D_OUT_1 : r_topX[127:64],
	       (r_cnt == 4'd0) ? rf_refT$D_OUT_1 : r_topX[63:0] } ;
  assign MUX_r_zIdx$write_1__VAL_1 = r_zIdx + 4'd1 ;
  assign MUX_w_refT$wset_1__VAL_1 =
	     { 1'd1, x__h66308, m_intra8$io_out_get[511:448] } ;
  assign MUX_w_refT$wset_1__VAL_2 =
	     { 1'd0,
	       x__h1997,
	       64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;

  // inlined wires
  assign w_refT$wget =
	     MUX_r_cnt$write_1__SEL_1 ?
	       MUX_w_refT$wset_1__VAL_1 :
	       MUX_w_refT$wset_1__VAL_2 ;
  assign w_refT$whas = WILL_FIRE_RL_s00_refLT || MUX_r_cnt$write_1__SEL_1 ;
  assign _upd_RL_do_ram$EN_rf_refT$whas = w_refT$whas && w_refT$wget[72] ;
  assign _sub_RL_s00_refLT$EN_rf_refT$wget =
	     r_cnt == 4'd4 || r_cnt[2:0] == 3'd3 || r_cnt[2:0] == 3'd2 ||
	     r_cnt[2:0] == 3'd1 ||
	     r_cnt[2:0] == 3'd0 ;
  assign _wget_RL_s00_refLT$EN_w_refT$wget =
	     (r_cnt == 4'd4 || r_cnt[2:0] == 3'd3 || r_cnt[2:0] == 3'd2 ||
	      r_cnt[2:0] == 3'd1 ||
	      r_cnt[2:0] == 3'd0) &&
	     w_refT$whas ;
  assign fifo_out_rv$port0__write_1 =
	     { 1'd0,
	       1035'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign fifo_out_rv$port1__read =
	     EN_io_out_get ? fifo_out_rv$port0__write_1 : fifo_out_rv ;
  assign fifo_out_rv$port1__write_1 =
	     { 1'd1,
	       m_intra8$io_out_get[1541:1536],
	       valid__h1833,
	       m_intra8$io_out_get[1535:512] } ;
  assign fifo_out_rv$port2__read =
	     MUX_r_cnt$write_1__SEL_1 ?
	       fifo_out_rv$port1__write_1 :
	       fifo_out_rv$port1__read ;

  // register fifo_out_rv
  assign fifo_out_rv$D_IN = fifo_out_rv$port2__read ;
  assign fifo_out_rv$EN = 1'b1 ;

  // register r_cnt
  always@(MUX_r_cnt$write_1__SEL_1 or
	  MUX_r_cnt$write_1__VAL_1 or
	  MUX_r_cnt$write_1__SEL_2 or MUX_r_cnt$write_1__VAL_2 or EN_start)
  case (1'b1)
    MUX_r_cnt$write_1__SEL_1: r_cnt$D_IN = MUX_r_cnt$write_1__VAL_1;
    MUX_r_cnt$write_1__SEL_2: r_cnt$D_IN = MUX_r_cnt$write_1__VAL_2;
    EN_start: r_cnt$D_IN = 4'd0;
    default: r_cnt$D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign r_cnt$EN =
	     MUX_r_cnt$write_1__SEL_2 || MUX_r_cnt$write_1__SEL_1 ||
	     EN_start ;

  // register r_dcVal
  assign r_dcVal$D_IN = x7204_PLUS_y7205_PLUS_8__q30[11:4] ;
  assign r_dcVal$EN = r_cnt == 4'd6 ;

  // register r_ltX_0
  assign r_ltX_0$D_IN = m_intra8$io_out_get[511:504] ;
  assign r_ltX_0$EN = MUX_r_cnt$write_1__SEL_1 && rIdx__h1830 == 4'd0 ;

  // register r_ltX_1
  assign r_ltX_1$D_IN = m_intra8$io_out_get[511:504] ;
  assign r_ltX_1$EN = MUX_r_cnt$write_1__SEL_1 && rIdx__h1830 == 4'd1 ;

  // register r_ltX_10
  assign r_ltX_10$D_IN = m_intra8$io_out_get[511:504] ;
  assign r_ltX_10$EN = MUX_r_cnt$write_1__SEL_1 && rIdx__h1830 == 4'd10 ;

  // register r_ltX_11
  assign r_ltX_11$D_IN = m_intra8$io_out_get[511:504] ;
  assign r_ltX_11$EN = MUX_r_cnt$write_1__SEL_1 && rIdx__h1830 == 4'd11 ;

  // register r_ltX_12
  assign r_ltX_12$D_IN = rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_12$EN = WILL_FIRE_RL_s00_refLT && r_cnt[2:0] == 3'd0 ;

  // register r_ltX_13
  assign r_ltX_13$D_IN = rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_13$EN = WILL_FIRE_RL_s00_refLT && r_cnt[2:0] == 3'd1 ;

  // register r_ltX_14
  assign r_ltX_14$D_IN = rf_refT$D_OUT_1[63:56] ;
  assign r_ltX_14$EN = WILL_FIRE_RL_s00_refLT && r_cnt[2:0] == 3'd2 ;

  // register r_ltX_15
  assign r_ltX_15$D_IN =
	     (rIdx__h1830 == 4'd7) ? m_intra8$io_out_get[511:504] : r_topX31 ;
  assign r_ltX_15$EN =
	     MUX_r_cnt$write_1__SEL_1 &&
	     (rIdx__h1830 == 4'd7 || rIdx__h1830 == 4'd15) ;

  // register r_ltX_2
  assign r_ltX_2$D_IN = m_intra8$io_out_get[511:504] ;
  assign r_ltX_2$EN = MUX_r_cnt$write_1__SEL_1 && rIdx__h1830 == 4'd2 ;

  // register r_ltX_3
  assign r_ltX_3$D_IN = m_intra8$io_out_get[511:504] ;
  assign r_ltX_3$EN = MUX_r_cnt$write_1__SEL_1 && rIdx__h1830 == 4'd3 ;

  // register r_ltX_4
  assign r_ltX_4$D_IN = m_intra8$io_out_get[511:504] ;
  assign r_ltX_4$EN = MUX_r_cnt$write_1__SEL_1 && rIdx__h1830 == 4'd4 ;

  // register r_ltX_5
  assign r_ltX_5$D_IN = m_intra8$io_out_get[511:504] ;
  assign r_ltX_5$EN = MUX_r_cnt$write_1__SEL_1 && rIdx__h1830 == 4'd5 ;

  // register r_ltX_6
  assign r_ltX_6$D_IN = m_intra8$io_out_get[511:504] ;
  assign r_ltX_6$EN = MUX_r_cnt$write_1__SEL_1 && rIdx__h1830 == 4'd6 ;

  // register r_ltX_7
  assign r_ltX_7$D_IN = r_ltX_15 ;
  assign r_ltX_7$EN = MUX_r_cnt$write_1__SEL_1 && rIdx__h1830 == 4'd15 ;

  // register r_ltX_8
  assign r_ltX_8$D_IN = m_intra8$io_out_get[511:504] ;
  assign r_ltX_8$EN = MUX_r_cnt$write_1__SEL_1 && rIdx__h1830 == 4'd8 ;

  // register r_ltX_9
  assign r_ltX_9$D_IN = m_intra8$io_out_get[511:504] ;
  assign r_ltX_9$EN = MUX_r_cnt$write_1__SEL_1 && rIdx__h1830 == 4'd9 ;

  // register r_recon
  assign r_recon$D_IN = 512'h0 ;
  assign r_recon$EN = 1'b0 ;

  // register r_refL
  always@(rcuY__h1832 or refLx__h57068 or r_refL)
  begin
    case (rcuY__h1832)
      2'd0: r_refL$D_IN = { r_refL[255:64], refLx__h57068 };
      2'd1: r_refL$D_IN = { r_refL[255:128], refLx__h57068, r_refL[63:0] };
      2'd2: r_refL$D_IN = { r_refL[255:192], refLx__h57068, r_refL[127:0] };
      2'd3: r_refL$D_IN = { refLx__h57068, r_refL[191:0] };
    endcase
  end
  assign r_refL$EN = MUX_r_cnt$write_1__SEL_1 ;

  // register r_ref_0
  assign r_ref_0$D_IN =
	     (valid__h1833 == 5'b0) ?
	       264'h808080808080808080808080808080808080808080808080808080808080808080 :
	       { IF_SEL_ARR_r_valid_read__5_BITS_4_TO_0_6_r_val_ETC___d235,
		 IF_SEL_ARR_r_valid_read__5_BITS_4_TO_0_6_r_val_ETC___d338 } ;
  assign r_ref_0$EN = r_cnt == 4'd5 ;

  // register r_ref_1
  assign r_ref_1$D_IN =
	     { r_ref_0_read__42_BITS_263_TO_256_92_CONCAT_0_C_ETC___d479,
	       x4915_PLUS_2__q31[9:2],
	       x5062_PLUS_2__q32[9:2],
	       x5209_PLUS_2__q33[9:2],
	       r_ref_0_read__42_BITS_135_TO_128_00_CONCAT_0_C_ETC___d606,
	       x8579_PLUS_2__q34[9:2] } ;
  assign r_ref_1$EN = r_cnt == 4'd6 ;

  // register r_tmpBuf
  assign r_tmpBuf$D_IN = 64'h0 ;
  assign r_tmpBuf$EN = 1'b0 ;

  // register r_topX
  assign r_topX$D_IN =
	     MUX_r_cnt$write_1__SEL_1 ?
	       MUX_r_topX$write_1__VAL_1 :
	       MUX_r_topX$write_1__VAL_2 ;
  assign r_topX$EN = w_refT$whas ;

  // register r_topX31
  assign r_topX31$D_IN = rf_refT$D_OUT_1[63:56] ;
  assign r_topX31$EN = WILL_FIRE_RL_s00_refLT && r_cnt[2:0] == 3'd3 ;

  // register r_valid
  assign r_valid$D_IN =
	     { 27'd62713787,
	       fWires_x[524],
	       fWires_x[524],
	       8'b01111011,
	       fWires_x[524],
	       fWires_x[524],
	       fWires_x[524],
	       10'd478,
	       fWires_x[527:526],
	       fWires_x[526],
	       2'd2,
	       fWires_x[526],
	       fWires_x[526],
	       fWires_x[526],
	       9'd443,
	       fWires_x[524],
	       fWires_x[524],
	       fWires_x[524],
	       fWires_x[526],
	       fWires_x[526],
	       fWires_x[526],
	       2'd2,
	       fWires_x[526],
	       fWires_x[526:524],
	       fWires_x[524] } ;
  assign r_valid$EN = EN_start ;

  // register r_zIdx
  assign r_zIdx$D_IN =
	     MUX_r_cnt$write_1__SEL_1 ? MUX_r_zIdx$write_1__VAL_1 : 4'd0 ;
  assign r_zIdx$EN = MUX_r_cnt$write_1__SEL_1 || EN_start ;

  // submodule m_intra8
  assign m_intra8$fWires_x =
	     { r_ref_1,
	       r_ref_0,
	       fWires_x[511:0],
	       r_dcVal,
	       fWires_x[523:518] } ;
  assign m_intra8$EN_startPred = m_intra8$RDY_startPred && r_cnt == 4'd7 ;
  assign m_intra8$EN_io_out_get = MUX_r_cnt$write_1__SEL_1 ;

  // submodule rf_refT
  assign rf_refT$ADDR_1 = w_refT$wget[71:64] ;
  assign rf_refT$ADDR_2 = 8'h0 ;
  assign rf_refT$ADDR_3 = 8'h0 ;
  assign rf_refT$ADDR_4 = 8'h0 ;
  assign rf_refT$ADDR_5 = 8'h0 ;
  assign rf_refT$ADDR_IN = w_refT$wget[71:64] ;
  assign rf_refT$D_IN = w_refT$wget[63:0] ;
  assign rf_refT$WE = _upd_RL_do_ram$EN_rf_refT$whas ;

  // remaining internal signals
  assign IF_SEL_ARR_r_valid_read__5_BITS_4_TO_0_6_r_val_ETC___d283 =
	     (valid__h1833 == 5'b01110) ? {8{x1__h3490[63:56]}} : x2__h3491 ;
  assign IF_r_cnt_read_EQ_4_6_THEN_rf_refT_sub_IF_w_ref_ETC___d36 =
	     { (r_cnt == 4'd4) ? rf_refT$D_OUT_1 : r_topX[319:256],
	       (r_cnt == 4'd3) ? rf_refT$D_OUT_1 : r_topX[255:192],
	       (r_cnt == 4'd2) ? rf_refT$D_OUT_1 : r_topX[191:128] } ;
  assign rIdx__h1830 = { r_zIdx[3], r_zIdx[1], r_zIdx[2], r_zIdx[0] } ;
  assign r_ref_0_read__42_BITS_135_TO_128_00_CONCAT_0_C_ETC___d555 =
	     { r_ref_0[135:128],
	       x6385_PLUS_2__q13[9:2],
	       x6582_PLUS_2__q14[9:2],
	       x6742_PLUS_2__q15[9:2],
	       x6902_PLUS_2__q16[9:2],
	       x7062_PLUS_2__q17[9:2],
	       x7222_PLUS_2__q18[9:2],
	       x7382_PLUS_2__q19[9:2] } ;
  assign r_ref_0_read__42_BITS_135_TO_128_00_CONCAT_0_C_ETC___d581 =
	     { r_ref_0_read__42_BITS_135_TO_128_00_CONCAT_0_C_ETC___d555,
	       x7521_PLUS_2__q20[9:2],
	       x7660_PLUS_2__q21[9:2],
	       x7799_PLUS_2__q22[9:2],
	       x7938_PLUS_2__q23[9:2] } ;
  assign r_ref_0_read__42_BITS_135_TO_128_00_CONCAT_0_C_ETC___d606 =
	     { r_ref_0_read__42_BITS_135_TO_128_00_CONCAT_0_C_ETC___d581,
	       x8077_PLUS_2__q25[9:2],
	       x8216_PLUS_2__q26[9:2],
	       x8355_PLUS_2__q27[9:2],
	       x8494_PLUS_2__q28[9:2] } ;
  assign r_ref_0_read__42_BITS_263_TO_256_92_CONCAT_0_C_ETC___d425 =
	     { r_ref_0[263:256],
	       x2988_PLUS_2__q1[9:2],
	       x3193_PLUS_2__q2[9:2],
	       x3361_PLUS_2__q3[9:2],
	       x3529_PLUS_2__q4[9:2] } ;
  assign r_ref_0_read__42_BITS_263_TO_256_92_CONCAT_0_C_ETC___d453 =
	     { r_ref_0_read__42_BITS_263_TO_256_92_CONCAT_0_C_ETC___d425,
	       x3697_PLUS_2__q5[9:2],
	       x3865_PLUS_2__q6[9:2],
	       x4033_PLUS_2__q7[9:2],
	       x4180_PLUS_2__q8[9:2] } ;
  assign r_ref_0_read__42_BITS_263_TO_256_92_CONCAT_0_C_ETC___d479 =
	     { r_ref_0_read__42_BITS_263_TO_256_92_CONCAT_0_C_ETC___d453,
	       x4327_PLUS_2__q9[9:2],
	       x4474_PLUS_2__q10[9:2],
	       x4621_PLUS_2__q11[9:2],
	       x4768_PLUS_2__q12[9:2] } ;
  assign rcuX__h1831 = { r_zIdx[2], r_zIdx[0] } ;
  assign rcuY__h1832 = { r_zIdx[3], r_zIdx[1] } ;
  assign refLx__h57068 =
	     { m_intra8$io_out_get[511:504],
	       m_intra8$io_out_get[447:440],
	       m_intra8$io_out_get[383:376],
	       m_intra8$io_out_get[319:312],
	       m_intra8$io_out_get[255:248],
	       m_intra8$io_out_get[191:184],
	       m_intra8$io_out_get[127:120],
	       m_intra8$io_out_get[63:56] } ;
  assign x2988_PLUS_2__q1 = x__h42988 + 10'd2 ;
  assign x3193_PLUS_2__q2 = x__h43193 + 10'd2 ;
  assign x3361_PLUS_2__q3 = x__h43361 + 10'd2 ;
  assign x3529_PLUS_2__q4 = x__h43529 + 10'd2 ;
  assign x3697_PLUS_2__q5 = x__h43697 + 10'd2 ;
  assign x3865_PLUS_2__q6 = x__h43865 + 10'd2 ;
  assign x4033_PLUS_2__q7 = x__h44033 + 10'd2 ;
  assign x4180_PLUS_2__q8 = x__h44180 + 10'd2 ;
  assign x4327_PLUS_2__q9 = x__h44327 + 10'd2 ;
  assign x4474_PLUS_2__q10 = x__h44474 + 10'd2 ;
  assign x4621_PLUS_2__q11 = x__h44621 + 10'd2 ;
  assign x4768_PLUS_2__q12 = x__h44768 + 10'd2 ;
  assign x4915_PLUS_2__q31 = x__h44915 + 10'd2 ;
  assign x5062_PLUS_2__q32 = x__h45062 + 10'd2 ;
  assign x5209_PLUS_2__q33 = x__h45209 + 10'd2 ;
  assign x6385_PLUS_2__q13 = x__h46385 + 10'd2 ;
  assign x6582_PLUS_2__q14 = x__h46582 + 10'd2 ;
  assign x6742_PLUS_2__q15 = x__h46742 + 10'd2 ;
  assign x6902_PLUS_2__q16 = x__h46902 + 10'd2 ;
  assign x7062_PLUS_2__q17 = x__h47062 + 10'd2 ;
  assign x7204_PLUS_y7205_PLUS_8__q30 = x__h37204 + y__h37205 + 12'd8 ;
  assign x7222_PLUS_2__q18 = x__h47222 + 10'd2 ;
  assign x7382_PLUS_2__q19 = x__h47382 + 10'd2 ;
  assign x7521_PLUS_2__q20 = x__h47521 + 10'd2 ;
  assign x7660_PLUS_2__q21 = x__h47660 + 10'd2 ;
  assign x7799_PLUS_2__q22 = x__h47799 + 10'd2 ;
  assign x7938_PLUS_2__q23 = x__h47938 + 10'd2 ;
  assign x8077_PLUS_2__q25 = x__h48077 + 10'd2 ;
  assign x8216_PLUS_2__q26 = x__h48216 + 10'd2 ;
  assign x8355_PLUS_2__q27 = x__h48355 + 10'd2 ;
  assign x8494_PLUS_2__q28 = x__h48494 + 10'd2 ;
  assign x8579_PLUS_2__q34 = x__h48579 + 10'd2 ;
  assign x__h1997 = { fWires_x[517:512], 2'b0 } + { 5'd0, r_cnt[2:0] } ;
  assign x__h24836 = { 1'b0, rcuX__h1831 } + 3'd1 ;
  assign x__h37204 = x__h37206 + y__h37207 ;
  assign x__h37206 = x__h37227 + y__h37228 ;
  assign x__h37227 = x__h37229 + y__h37230 ;
  assign x__h37229 = x__h37250 + y__h37251 ;
  assign x__h37250 = x__h37252 + y__h37253 ;
  assign x__h37252 = x__h37273 + y__h37274 ;
  assign x__h37273 = x__h37275 + y__h37276 ;
  assign x__h37275 = x__h37296 + y__h37297 ;
  assign x__h37296 = x__h37298 + y__h37299 ;
  assign x__h37298 = x__h37319 + y__h37320 ;
  assign x__h37319 = x__h37321 + y__h37322 ;
  assign x__h37321 = x__h37342 + y__h37343 ;
  assign x__h37342 = x__h37344 + y__h37345 ;
  assign x__h37344 = x__h37365 + y__h37366 ;
  assign x__h37365 = { 4'd0, r_ref_0[143:136] } ;
  assign x__h42988 = x__h42990 + y__h42991 ;
  assign x__h42990 = x__h42992 + y__h42993 ;
  assign x__h42992 = { 2'd0, r_ref_0[263:256] } ;
  assign x__h43193 = x__h43195 + y__h43196 ;
  assign x__h43195 = x__h43197 + y__h43198 ;
  assign x__h43197 = { 2'd0, r_ref_0[255:248] } ;
  assign x__h43361 = x__h43363 + y__h43364 ;
  assign x__h43363 = y__h42991 + y__h43366 ;
  assign x__h43529 = x__h43531 + y__h43532 ;
  assign x__h43531 = y__h43196 + y__h43534 ;
  assign x__h43697 = x__h43699 + y__h43700 ;
  assign x__h43699 = y__h43364 + y__h43702 ;
  assign x__h43865 = x__h43867 + y__h43868 ;
  assign x__h43867 = y__h43532 + y__h43870 ;
  assign x__h44033 = x__h44035 + y__h44036 ;
  assign x__h44035 = y__h43700 + y__h44038 ;
  assign x__h44180 = x__h44182 + y__h44183 ;
  assign x__h44182 = y__h43868 + y__h44185 ;
  assign x__h44327 = x__h44329 + y__h44330 ;
  assign x__h44329 = y__h44036 + y__h44332 ;
  assign x__h44474 = x__h44476 + y__h44477 ;
  assign x__h44476 = y__h44183 + y__h44479 ;
  assign x__h44621 = x__h44623 + y__h44624 ;
  assign x__h44623 = y__h44330 + y__h44626 ;
  assign x__h44768 = x__h44770 + y__h44771 ;
  assign x__h44770 = y__h44477 + y__h44773 ;
  assign x__h44915 = x__h44917 + y__h44918 ;
  assign x__h44917 = y__h44624 + y__h44920 ;
  assign x__h45062 = x__h45064 + y__h45065 ;
  assign x__h45064 = y__h44771 + y__h45067 ;
  assign x__h45209 = x__h45211 + y__h45212 ;
  assign x__h45211 = y__h44918 + y__h45214 ;
  assign x__h46385 = x__h46387 + y__h46388 ;
  assign x__h46387 = x__h46389 + y__h46390 ;
  assign x__h46389 = { 2'd0, r_ref_0[119:112] } ;
  assign x__h46582 = x__h46584 + y__h46585 ;
  assign x__h46584 = x__h46586 + y__h46587 ;
  assign x__h46586 = { 2'd0, r_ref_0[111:104] } ;
  assign x__h46742 = x__h46744 + x__h46389 ;
  assign x__h46744 = x__h46746 + y__h46747 ;
  assign x__h46746 = { 2'd0, r_ref_0[103:96] } ;
  assign x__h46902 = x__h46904 + x__h46586 ;
  assign x__h46904 = x__h46906 + y__h46907 ;
  assign x__h46906 = { 2'd0, r_ref_0[95:88] } ;
  assign x__h47062 = x__h47064 + x__h46746 ;
  assign x__h47064 = x__h47066 + y__h47067 ;
  assign x__h47066 = { 2'd0, r_ref_0[87:80] } ;
  assign x__h47222 = x__h47224 + x__h46906 ;
  assign x__h47224 = x__h47226 + y__h47227 ;
  assign x__h47226 = { 2'd0, r_ref_0[79:72] } ;
  assign x__h47382 = x__h47384 + x__h47066 ;
  assign x__h47384 = x__h47386 + y__h47387 ;
  assign x__h47386 = { 2'd0, r_ref_0[71:64] } ;
  assign x__h47521 = x__h47523 + x__h47226 ;
  assign x__h47523 = x__h47525 + y__h47526 ;
  assign x__h47525 = { 2'd0, r_ref_0[63:56] } ;
  assign x__h47660 = x__h47662 + x__h47386 ;
  assign x__h47662 = x__h47664 + y__h47665 ;
  assign x__h47664 = { 2'd0, r_ref_0[55:48] } ;
  assign x__h47799 = x__h47801 + x__h47525 ;
  assign x__h47801 = x__h47803 + y__h47804 ;
  assign x__h47803 = { 2'd0, r_ref_0[47:40] } ;
  assign x__h47938 = x__h47940 + x__h47664 ;
  assign x__h47940 = x__h47942 + y__h47943 ;
  assign x__h47942 = { 2'd0, r_ref_0[39:32] } ;
  assign x__h48077 = x__h48079 + x__h47803 ;
  assign x__h48079 = x__h48081 + y__h48082 ;
  assign x__h48081 = { 2'd0, r_ref_0[31:24] } ;
  assign x__h48216 = x__h48218 + x__h47942 ;
  assign x__h48218 = x__h48220 + y__h48221 ;
  assign x__h48220 = { 2'd0, r_ref_0[23:16] } ;
  assign x__h48355 = x__h48357 + x__h48081 ;
  assign x__h48357 = x__h48359 + y__h48360 ;
  assign x__h48359 = { 2'd0, r_ref_0[15:8] } ;
  assign x__h48494 = x__h48496 + x__h48220 ;
  assign x__h48496 = y__h45212 + y__h48499 ;
  assign x__h48579 = x__h48581 + x__h48359 ;
  assign x__h48581 = y__h45065 + y__h48584 ;
  assign x__h66308 = { fWires_x[517:512], rcuX__h1831 } ;
  assign y__h37205 = { 4'd0, r_ref_0[71:64] } ;
  assign y__h37207 = { 4'd0, r_ref_0[199:192] } ;
  assign y__h37228 = { 4'd0, r_ref_0[63:56] } ;
  assign y__h37230 = { 4'd0, r_ref_0[191:184] } ;
  assign y__h37251 = { 4'd0, r_ref_0[55:48] } ;
  assign y__h37253 = { 4'd0, r_ref_0[183:176] } ;
  assign y__h37274 = { 4'd0, r_ref_0[47:40] } ;
  assign y__h37276 = { 4'd0, r_ref_0[175:168] } ;
  assign y__h37297 = { 4'd0, r_ref_0[39:32] } ;
  assign y__h37299 = { 4'd0, r_ref_0[167:160] } ;
  assign y__h37320 = { 4'd0, r_ref_0[31:24] } ;
  assign y__h37322 = { 4'd0, r_ref_0[159:152] } ;
  assign y__h37343 = { 4'd0, r_ref_0[23:16] } ;
  assign y__h37345 = { 4'd0, r_ref_0[151:144] } ;
  assign y__h37366 = { 4'd0, r_ref_0[15:8] } ;
  assign y__h42991 = { 2'd0, r_ref_0[247:240] } ;
  assign y__h42993 = { 1'd0, r_ref_0[255:248], 1'd0 } ;
  assign y__h43196 = { 2'd0, r_ref_0[239:232] } ;
  assign y__h43198 = { 1'd0, r_ref_0[247:240], 1'd0 } ;
  assign y__h43364 = { 2'd0, r_ref_0[231:224] } ;
  assign y__h43366 = { 1'd0, r_ref_0[239:232], 1'd0 } ;
  assign y__h43532 = { 2'd0, r_ref_0[223:216] } ;
  assign y__h43534 = { 1'd0, r_ref_0[231:224], 1'd0 } ;
  assign y__h43700 = { 2'd0, r_ref_0[215:208] } ;
  assign y__h43702 = { 1'd0, r_ref_0[223:216], 1'd0 } ;
  assign y__h43868 = { 2'd0, r_ref_0[207:200] } ;
  assign y__h43870 = { 1'd0, r_ref_0[215:208], 1'd0 } ;
  assign y__h44036 = { 2'd0, r_ref_0[199:192] } ;
  assign y__h44038 = { 1'd0, r_ref_0[207:200], 1'd0 } ;
  assign y__h44183 = { 2'd0, r_ref_0[191:184] } ;
  assign y__h44185 = { 1'd0, r_ref_0[199:192], 1'd0 } ;
  assign y__h44330 = { 2'd0, r_ref_0[183:176] } ;
  assign y__h44332 = { 1'd0, r_ref_0[191:184], 1'd0 } ;
  assign y__h44477 = { 2'd0, r_ref_0[175:168] } ;
  assign y__h44479 = { 1'd0, r_ref_0[183:176], 1'd0 } ;
  assign y__h44624 = { 2'd0, r_ref_0[167:160] } ;
  assign y__h44626 = { 1'd0, r_ref_0[175:168], 1'd0 } ;
  assign y__h44771 = { 2'd0, r_ref_0[159:152] } ;
  assign y__h44773 = { 1'd0, r_ref_0[167:160], 1'd0 } ;
  assign y__h44918 = { 2'd0, r_ref_0[151:144] } ;
  assign y__h44920 = { 1'd0, r_ref_0[159:152], 1'd0 } ;
  assign y__h45065 = { 2'd0, r_ref_0[143:136] } ;
  assign y__h45067 = { 1'd0, r_ref_0[151:144], 1'd0 } ;
  assign y__h45212 = { 2'd0, r_ref_0[7:0] } ;
  assign y__h45214 = { 1'd0, r_ref_0[143:136], 1'd0 } ;
  assign y__h46388 = { 2'd0, r_ref_0[135:128] } ;
  assign y__h46390 = { 1'd0, r_ref_0[127:120], 1'd0 } ;
  assign y__h46585 = { 2'd0, r_ref_0[127:120] } ;
  assign y__h46587 = { 1'd0, r_ref_0[119:112], 1'd0 } ;
  assign y__h46747 = { 1'd0, r_ref_0[111:104], 1'd0 } ;
  assign y__h46907 = { 1'd0, r_ref_0[103:96], 1'd0 } ;
  assign y__h47067 = { 1'd0, r_ref_0[95:88], 1'd0 } ;
  assign y__h47227 = { 1'd0, r_ref_0[87:80], 1'd0 } ;
  assign y__h47387 = { 1'd0, r_ref_0[79:72], 1'd0 } ;
  assign y__h47526 = { 1'd0, r_ref_0[71:64], 1'd0 } ;
  assign y__h47665 = { 1'd0, r_ref_0[63:56], 1'd0 } ;
  assign y__h47804 = { 1'd0, r_ref_0[55:48], 1'd0 } ;
  assign y__h47943 = { 1'd0, r_ref_0[47:40], 1'd0 } ;
  assign y__h48082 = { 1'd0, r_ref_0[39:32], 1'd0 } ;
  assign y__h48221 = { 1'd0, r_ref_0[31:24], 1'd0 } ;
  assign y__h48360 = { 1'd0, r_ref_0[23:16], 1'd0 } ;
  assign y__h48499 = { 1'd0, r_ref_0[15:8], 1'd0 } ;
  assign y__h48584 = { 1'd0, r_ref_0[7:0], 1'd0 } ;
  always@(r_zIdx or r_valid)
  begin
    case (r_zIdx)
      4'd0: valid__h1833 = r_valid[4:0];
      4'd1: valid__h1833 = r_valid[9:5];
      4'd2: valid__h1833 = r_valid[14:10];
      4'd3: valid__h1833 = r_valid[19:15];
      4'd4: valid__h1833 = r_valid[24:20];
      4'd5: valid__h1833 = r_valid[29:25];
      4'd6: valid__h1833 = r_valid[34:30];
      4'd7: valid__h1833 = r_valid[39:35];
      4'd8: valid__h1833 = r_valid[44:40];
      4'd9: valid__h1833 = r_valid[49:45];
      4'd10: valid__h1833 = r_valid[54:50];
      4'd11: valid__h1833 = r_valid[59:55];
      4'd12: valid__h1833 = r_valid[64:60];
      4'd13: valid__h1833 = r_valid[69:65];
      4'd14: valid__h1833 = r_valid[74:70];
      4'd15: valid__h1833 = r_valid[79:75];
    endcase
  end
  always@(rcuX__h1831 or r_topX)
  begin
    case (rcuX__h1831)
      2'd0: x1__h3490 = r_topX[63:0];
      2'd1: x1__h3490 = r_topX[127:64];
      2'd2: x1__h3490 = r_topX[191:128];
      2'd3: x1__h3490 = r_topX[255:192];
    endcase
  end
  always@(x__h24836 or r_topX)
  begin
    case (x__h24836)
      3'd0: x2__h3491 = r_topX[63:0];
      3'd1: x2__h3491 = r_topX[127:64];
      3'd2: x2__h3491 = r_topX[191:128];
      3'd3: x2__h3491 = r_topX[255:192];
      3'd4: x2__h3491 = r_topX[319:256];
      default: x2__h3491 =
		   64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(rcuY__h1832 or r_refL)
  begin
    case (rcuY__h1832)
      2'd0:
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156 =
	      { r_refL[7:0],
		r_refL[15:8],
		r_refL[23:16],
		r_refL[31:24],
		r_refL[39:32],
		r_refL[47:40],
		r_refL[55:48],
		r_refL[63:56],
		r_refL[71:64],
		r_refL[79:72],
		r_refL[87:80],
		r_refL[95:88],
		r_refL[103:96],
		r_refL[111:104],
		r_refL[119:112],
		r_refL[127:120] };
      2'd1:
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156 =
	      { r_refL[71:64],
		r_refL[79:72],
		r_refL[87:80],
		r_refL[95:88],
		r_refL[103:96],
		r_refL[111:104],
		r_refL[119:112],
		r_refL[127:120],
		r_refL[135:128],
		r_refL[143:136],
		r_refL[151:144],
		r_refL[159:152],
		r_refL[167:160],
		r_refL[175:168],
		r_refL[183:176],
		r_refL[191:184] };
      2'd2:
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156 =
	      { r_refL[135:128],
		r_refL[143:136],
		r_refL[151:144],
		r_refL[159:152],
		r_refL[167:160],
		r_refL[175:168],
		r_refL[183:176],
		r_refL[191:184],
		r_refL[199:192],
		r_refL[207:200],
		r_refL[215:208],
		r_refL[223:216],
		r_refL[231:224],
		r_refL[239:232],
		r_refL[247:240],
		r_refL[255:248] };
      2'd3:
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156 =
	      { r_refL[199:192],
		r_refL[207:200],
		r_refL[215:208],
		r_refL[223:216],
		r_refL[231:224],
		r_refL[239:232],
		r_refL[247:240],
		r_refL[255:248],
		64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
    endcase
  end
  always@(rcuY__h1832 or r_refL)
  begin
    case (rcuY__h1832)
      2'd0:
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d188 =
	      { r_refL[7:0],
		r_refL[15:8],
		r_refL[23:16],
		r_refL[31:24],
		r_refL[39:32],
		r_refL[47:40],
		r_refL[55:48],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56] };
      2'd1:
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d188 =
	      { r_refL[71:64],
		r_refL[79:72],
		r_refL[87:80],
		r_refL[95:88],
		r_refL[103:96],
		r_refL[111:104],
		r_refL[119:112],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120] };
      2'd2:
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d188 =
	      { r_refL[135:128],
		r_refL[143:136],
		r_refL[151:144],
		r_refL[159:152],
		r_refL[167:160],
		r_refL[175:168],
		r_refL[183:176],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184] };
      2'd3:
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d188 =
	      { r_refL[199:192],
		r_refL[207:200],
		r_refL[215:208],
		r_refL[223:216],
		r_refL[231:224],
		r_refL[239:232],
		r_refL[247:240],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248] };
    endcase
  end
  always@(rIdx__h1830 or
	  r_ltX_10 or
	  r_ltX_15 or
	  r_ltX_12 or
	  r_ltX_13 or
	  r_ltX_14 or
	  r_ltX_3 or
	  r_ltX_0 or
	  r_ltX_1 or
	  r_ltX_2 or
	  r_ltX_7 or
	  r_ltX_4 or r_ltX_5 or r_ltX_6 or r_ltX_11 or r_ltX_8 or r_ltX_9)
  begin
    case (rIdx__h1830)
      4'd0:
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d333 =
	      r_ltX_15;
      4'd1:
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d333 =
	      r_ltX_12;
      4'd2:
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d333 =
	      r_ltX_13;
      4'd3:
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d333 =
	      r_ltX_14;
      4'd4:
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d333 = r_ltX_3;
      4'd5:
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d333 = r_ltX_0;
      4'd6:
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d333 = r_ltX_1;
      4'd7:
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d333 = r_ltX_2;
      4'd8:
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d333 = r_ltX_7;
      4'd9:
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d333 = r_ltX_4;
      4'd10:
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d333 = r_ltX_5;
      4'd11:
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d333 = r_ltX_6;
      4'd12:
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d333 =
	      r_ltX_11;
      4'd13:
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d333 = r_ltX_8;
      4'd14:
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d333 = r_ltX_9;
      4'd15:
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d333 =
	      r_ltX_10;
    endcase
  end
  always@(rcuY__h1832 or r_refL)
  begin
    case (rcuY__h1832)
      2'd0:
	  CASE_rcuY832_0_r_refL_BITS_63_TO_56_CONCAT_r_r_ETC__q24 =
	      { r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:56],
		r_refL[63:0] };
      2'd1:
	  CASE_rcuY832_0_r_refL_BITS_63_TO_56_CONCAT_r_r_ETC__q24 =
	      { r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:120],
		r_refL[127:64] };
      2'd2:
	  CASE_rcuY832_0_r_refL_BITS_63_TO_56_CONCAT_r_r_ETC__q24 =
	      { r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:184],
		r_refL[191:128] };
      2'd3:
	  CASE_rcuY832_0_r_refL_BITS_63_TO_56_CONCAT_r_r_ETC__q24 =
	      { r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:248],
		r_refL[255:192] };
    endcase
  end
  always@(valid__h1833 or
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156 or
	  CASE_rcuY832_0_r_refL_BITS_63_TO_56_CONCAT_r_r_ETC__q24 or
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d188 or
	  x1__h3490)
  begin
    case (valid__h1833)
      5'b00010:
	  IF_SEL_ARR_r_valid_read__5_BITS_4_TO_0_6_r_val_ETC___d235 =
	      CASE_rcuY832_0_r_refL_BITS_63_TO_56_CONCAT_r_r_ETC__q24;
      5'b00011:
	  IF_SEL_ARR_r_valid_read__5_BITS_4_TO_0_6_r_val_ETC___d235 =
	      { IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[7:0],
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[15:8],
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[23:16],
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[31:24],
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[39:32],
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[47:40],
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[55:48],
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[63:56],
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[71:64],
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[79:72],
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[87:80],
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[95:88],
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[103:96],
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[111:104],
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[119:112],
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[127:120] };
      5'b01110, 5'b11110:
	  IF_SEL_ARR_r_valid_read__5_BITS_4_TO_0_6_r_val_ETC___d235 =
	      { IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d188[7:0],
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d188[15:8],
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d188[23:16],
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d188[31:24],
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d188[39:32],
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d188[47:40],
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d188[55:48],
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d188[63:56],
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d188[71:64],
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d188[79:72],
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d188[87:80],
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d188[95:88],
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d188[103:96],
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d188[111:104],
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d188[119:112],
		IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d188[127:120] };
      5'b11000:
	  IF_SEL_ARR_r_valid_read__5_BITS_4_TO_0_6_r_val_ETC___d235 =
	      {16{x1__h3490[7:0]}};
      default: IF_SEL_ARR_r_valid_read__5_BITS_4_TO_0_6_r_val_ETC___d235 =
		   { IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[7:0],
		     IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[15:8],
		     IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[23:16],
		     IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[31:24],
		     IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[39:32],
		     IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[47:40],
		     IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[55:48],
		     IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[63:56],
		     IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[71:64],
		     IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[79:72],
		     IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[87:80],
		     IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[95:88],
		     IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[103:96],
		     IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[111:104],
		     IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[119:112],
		     IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d156[127:120] };
    endcase
  end
  always@(rcuY__h1832 or r_refL)
  begin
    case (rcuY__h1832)
      2'd0:
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d271 =
	      {17{r_refL[7:0]}};
      2'd1:
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d271 =
	      {17{r_refL[71:64]}};
      2'd2:
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d271 =
	      {17{r_refL[135:128]}};
      2'd3:
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d271 =
	      {17{r_refL[199:192]}};
    endcase
  end
  always@(valid__h1833 or
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d333 or
	  x1__h3490)
  begin
    case (valid__h1833)
      5'b01110:
	  CASE_valid833_0b1110_IF_r_zIdx_read__3_BIT_3_7_ETC__q29 =
	      IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d333;
      5'b11000:
	  CASE_valid833_0b1110_IF_r_zIdx_read__3_BIT_3_7_ETC__q29 =
	      x1__h3490[7:0];
      default: CASE_valid833_0b1110_IF_r_zIdx_read__3_BIT_3_7_ETC__q29 =
		   IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d333;
    endcase
  end
  always@(valid__h1833 or
	  IF_SEL_ARR_r_valid_read__5_BITS_4_TO_0_6_r_val_ETC___d283 or
	  x1__h3490 or
	  CASE_valid833_0b1110_IF_r_zIdx_read__3_BIT_3_7_ETC__q29 or
	  IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d271)
  begin
    case (valid__h1833)
      5'b00010, 5'b00011:
	  IF_SEL_ARR_r_valid_read__5_BITS_4_TO_0_6_r_val_ETC___d338 =
	      IF_r_zIdx_read__3_BIT_3_7_CONCAT_r_zIdx_read___ETC___d271;
      default: IF_SEL_ARR_r_valid_read__5_BITS_4_TO_0_6_r_val_ETC___d338 =
		   { IF_SEL_ARR_r_valid_read__5_BITS_4_TO_0_6_r_val_ETC___d283,
		     x1__h3490,
		     CASE_valid833_0b1110_IF_r_zIdx_read__3_BIT_3_7_ETC__q29 };
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        fifo_out_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      1035'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	r_cnt <= `BSV_ASSIGNMENT_DELAY 4'd15;
	r_zIdx <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (fifo_out_rv$EN)
	  fifo_out_rv <= `BSV_ASSIGNMENT_DELAY fifo_out_rv$D_IN;
	if (r_cnt$EN) r_cnt <= `BSV_ASSIGNMENT_DELAY r_cnt$D_IN;
	if (r_zIdx$EN) r_zIdx <= `BSV_ASSIGNMENT_DELAY r_zIdx$D_IN;
      end
    if (r_dcVal$EN) r_dcVal <= `BSV_ASSIGNMENT_DELAY r_dcVal$D_IN;
    if (r_ltX_0$EN) r_ltX_0 <= `BSV_ASSIGNMENT_DELAY r_ltX_0$D_IN;
    if (r_ltX_1$EN) r_ltX_1 <= `BSV_ASSIGNMENT_DELAY r_ltX_1$D_IN;
    if (r_ltX_10$EN) r_ltX_10 <= `BSV_ASSIGNMENT_DELAY r_ltX_10$D_IN;
    if (r_ltX_11$EN) r_ltX_11 <= `BSV_ASSIGNMENT_DELAY r_ltX_11$D_IN;
    if (r_ltX_12$EN) r_ltX_12 <= `BSV_ASSIGNMENT_DELAY r_ltX_12$D_IN;
    if (r_ltX_13$EN) r_ltX_13 <= `BSV_ASSIGNMENT_DELAY r_ltX_13$D_IN;
    if (r_ltX_14$EN) r_ltX_14 <= `BSV_ASSIGNMENT_DELAY r_ltX_14$D_IN;
    if (r_ltX_15$EN) r_ltX_15 <= `BSV_ASSIGNMENT_DELAY r_ltX_15$D_IN;
    if (r_ltX_2$EN) r_ltX_2 <= `BSV_ASSIGNMENT_DELAY r_ltX_2$D_IN;
    if (r_ltX_3$EN) r_ltX_3 <= `BSV_ASSIGNMENT_DELAY r_ltX_3$D_IN;
    if (r_ltX_4$EN) r_ltX_4 <= `BSV_ASSIGNMENT_DELAY r_ltX_4$D_IN;
    if (r_ltX_5$EN) r_ltX_5 <= `BSV_ASSIGNMENT_DELAY r_ltX_5$D_IN;
    if (r_ltX_6$EN) r_ltX_6 <= `BSV_ASSIGNMENT_DELAY r_ltX_6$D_IN;
    if (r_ltX_7$EN) r_ltX_7 <= `BSV_ASSIGNMENT_DELAY r_ltX_7$D_IN;
    if (r_ltX_8$EN) r_ltX_8 <= `BSV_ASSIGNMENT_DELAY r_ltX_8$D_IN;
    if (r_ltX_9$EN) r_ltX_9 <= `BSV_ASSIGNMENT_DELAY r_ltX_9$D_IN;
    if (r_recon$EN) r_recon <= `BSV_ASSIGNMENT_DELAY r_recon$D_IN;
    if (r_refL$EN) r_refL <= `BSV_ASSIGNMENT_DELAY r_refL$D_IN;
    if (r_ref_0$EN) r_ref_0 <= `BSV_ASSIGNMENT_DELAY r_ref_0$D_IN;
    if (r_ref_1$EN) r_ref_1 <= `BSV_ASSIGNMENT_DELAY r_ref_1$D_IN;
    if (r_tmpBuf$EN) r_tmpBuf <= `BSV_ASSIGNMENT_DELAY r_tmpBuf$D_IN;
    if (r_topX$EN) r_topX <= `BSV_ASSIGNMENT_DELAY r_topX$D_IN;
    if (r_topX31$EN) r_topX31 <= `BSV_ASSIGNMENT_DELAY r_topX31$D_IN;
    if (r_valid$EN) r_valid <= `BSV_ASSIGNMENT_DELAY r_valid$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    fifo_out_rv =
	1036'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    r_cnt = 4'hA;
    r_dcVal = 8'hAA;
    r_ltX_0 = 8'hAA;
    r_ltX_1 = 8'hAA;
    r_ltX_10 = 8'hAA;
    r_ltX_11 = 8'hAA;
    r_ltX_12 = 8'hAA;
    r_ltX_13 = 8'hAA;
    r_ltX_14 = 8'hAA;
    r_ltX_15 = 8'hAA;
    r_ltX_2 = 8'hAA;
    r_ltX_3 = 8'hAA;
    r_ltX_4 = 8'hAA;
    r_ltX_5 = 8'hAA;
    r_ltX_6 = 8'hAA;
    r_ltX_7 = 8'hAA;
    r_ltX_8 = 8'hAA;
    r_ltX_9 = 8'hAA;
    r_recon =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    r_refL =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    r_ref_0 =
	264'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    r_ref_1 =
	264'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    r_tmpBuf = 64'hAAAAAAAAAAAAAAAA;
    r_topX =
	320'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    r_topX31 = 8'hAA;
    r_valid = 80'hAAAAAAAAAAAAAAAAAAAA;
    r_zIdx = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_r_cnt$write_1__SEL_1 && WILL_FIRE_RL_s00_refLT)
	$display("Error: \"mkIntraPredCtu.bsv\", line 287, column 9: (R0002)\n  Conflict-free rules RL_s04_result and RL_s00_refLT called conflicting\n  methods wset and wset of module instance w_refT.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_r_cnt$write_1__SEL_1 && WILL_FIRE_RL_s00_refLT &&
	  _sub_RL_s00_refLT$EN_rf_refT$wget)
	$display("Error: \"mkIntraPredCtu.bsv\", line 287, column 9: (R0002)\n  Conflict-free rules RL_s04_result and RL_s00_refLT called conflicting\n  methods wset and whas of module instance w_refT.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_r_cnt$write_1__SEL_1 && WILL_FIRE_RL_s00_refLT &&
	  _wget_RL_s00_refLT$EN_w_refT$wget)
	$display("Error: \"mkIntraPredCtu.bsv\", line 287, column 9: (R0002)\n  Conflict-free rules RL_s04_result and RL_s00_refLT called conflicting\n  methods wset and wget of module instance w_refT.\n");
  end
  // synopsys translate_on
endmodule  // mkIntraPredCtu

